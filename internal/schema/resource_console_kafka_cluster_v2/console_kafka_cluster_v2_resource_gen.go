// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_console_kafka_cluster_v2

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/validation"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ConsoleKafkaClusterV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Kafka cluster labels",
				MarkdownDescription: "Kafka cluster labels",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Kafka cluster name, must be unique, acts as an ID for import",
				MarkdownDescription: "Kafka cluster name, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-.]+$"), ""),
				},
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"bootstrap_servers": schema.StringAttribute{
						Required:            true,
						Description:         "List of bootstrap servers for the Kafka cluster separated by comma",
						MarkdownDescription: "List of bootstrap servers for the Kafka cluster separated by comma",
					},
					"color": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Kafka cluster icon color in hexadecimal format like `#FF0000`",
						MarkdownDescription: "Kafka cluster icon color in hexadecimal format like `#FF0000`",
					},
					"display_name": schema.StringAttribute{
						Required:            true,
						Description:         "Kafka cluster display name",
						MarkdownDescription: "Kafka cluster display name",
					},
					"icon": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Kafka cluster icon. List of available icons can be found [here](https://docs.conduktor.io/platform/reference/resource-reference/console/#icon-sets)",
						MarkdownDescription: "Kafka cluster icon. List of available icons can be found [here](https://docs.conduktor.io/platform/reference/resource-reference/console/#icon-sets)",
					},
					"ignore_untrusted_certificate": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Ignore untrusted certificate for Kafka cluster",
						MarkdownDescription: "Ignore untrusted certificate for Kafka cluster",
						Default:             booldefault.StaticBool(false),
					},
					"kafka_flavor": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"api_token": schema.StringAttribute{
								Optional:            true,
								Sensitive:           true,
								Description:         "Aiven API token. Required if type is `Aiven`",
								MarkdownDescription: "Aiven API token. Required if type is `Aiven`",
							},
							"confluent_cluster_id": schema.StringAttribute{
								Optional:            true,
								Description:         "Confluent cluster identifier. Required if type is `Confluent`",
								MarkdownDescription: "Confluent cluster identifier. Required if type is `Confluent`",
							},
							"confluent_environment_id": schema.StringAttribute{
								Optional:            true,
								Description:         "Confluent environment identifier. Required if type is `Confluent`",
								MarkdownDescription: "Confluent environment identifier. Required if type is `Confluent`",
							},
							"ignore_untrusted_certificate": schema.BoolAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Ignore untrusted certificate for Gateway Admin API. Only used if type is `Gateway`",
								MarkdownDescription: "Ignore untrusted certificate for Gateway Admin API. Only used if type is `Gateway`",
								Default:             booldefault.StaticBool(false),
							},
							"key": schema.StringAttribute{
								Optional:            true,
								Sensitive:           true,
								Description:         "Confluent API key. Required if type is `Confluent`",
								MarkdownDescription: "Confluent API key. Required if type is `Confluent`",
							},
							"password": schema.StringAttribute{
								Optional:            true,
								Sensitive:           true,
								Description:         "Conduktor Gateway Admin password. Required if type is `Gateway`",
								MarkdownDescription: "Conduktor Gateway Admin password. Required if type is `Gateway`",
							},
							"project": schema.StringAttribute{
								Optional:            true,
								Description:         "Aiven project name. Required if type is `Aiven`",
								MarkdownDescription: "Aiven project name. Required if type is `Aiven`",
							},
							"secret": schema.StringAttribute{
								Optional:            true,
								Sensitive:           true,
								Description:         "Confluent API secret. Required if type is `Confluent`",
								MarkdownDescription: "Confluent API secret. Required if type is `Confluent`",
							},
							"service_name": schema.StringAttribute{
								Optional:            true,
								Description:         "Aiven service name. Required if type is `Aiven`",
								MarkdownDescription: "Aiven service name. Required if type is `Aiven`",
							},
							"type": schema.StringAttribute{
								Required:            true,
								Description:         "Kafka provider type : `Confluent`, `Aiven`, `Gateway`. More detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#kafka-provider)",
								MarkdownDescription: "Kafka provider type : `Confluent`, `Aiven`, `Gateway`. More detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#kafka-provider)",
								Validators: []validator.String{
									stringvalidator.OneOf(validation.ValidKafkaFlavorTypes...),
								},
							},
							"url": schema.StringAttribute{
								Optional:            true,
								Description:         "Conduktor Gateway Admin API URL. Required if type is `Gateway`",
								MarkdownDescription: "Conduktor Gateway Admin API URL. Required if type is `Gateway`",
							},
							"user": schema.StringAttribute{
								Optional:            true,
								Description:         "Conduktor Gateway Admin user. Required if type is `Gateway`",
								MarkdownDescription: "Conduktor Gateway Admin user. Required if type is `Gateway`",
							},
							"virtual_cluster": schema.StringAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Conduktor Gateway Virtual cluster name (default `passthrough`). Only used if type is `Gateway`",
								MarkdownDescription: "Conduktor Gateway Virtual cluster name (default `passthrough`). Only used if type is `Gateway`",
								Validators: []validator.String{
									validation.NonEmptyString(),
								},
								Default: stringdefault.StaticString("passthrough"),
							},
						},
						CustomType: KafkaFlavorType{
							ObjectType: types.ObjectType{
								AttrTypes: KafkaFlavorValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Schema registry configuration",
						MarkdownDescription: "Schema registry configuration",
					},
					"properties": schema.MapAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Kafka cluster properties",
						MarkdownDescription: "Kafka cluster properties",
					},
					"schema_registry": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"ignore_untrusted_certificate": schema.BoolAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Ignore untrusted certificate for schema registry. Only used if type is `ConfluentLike`",
								MarkdownDescription: "Ignore untrusted certificate for schema registry. Only used if type is `ConfluentLike`",
								Default:             booldefault.StaticBool(false),
							},
							"properties": schema.StringAttribute{
								Optional:            true,
								Description:         "Schema registry properties. Only used if type is `ConfluentLike`",
								MarkdownDescription: "Schema registry properties. Only used if type is `ConfluentLike`",
							},
							"region": schema.StringAttribute{
								Optional:            true,
								Description:         "Glue Schema registry AWS region. Required if type is `Glue`",
								MarkdownDescription: "Glue Schema registry AWS region. Required if type is `Glue`",
							},
							"registry_name": schema.StringAttribute{
								Optional:            true,
								Description:         "Glue Schema registry name. Only used if type is `Glue`",
								MarkdownDescription: "Glue Schema registry name. Only used if type is `Glue`",
							},
							"security": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"access_key_id": schema.StringAttribute{
										Optional:            true,
										Sensitive:           true,
										Description:         "Glue Schema registry AWS access key ID. Required if type is Glue with security `Credentials`",
										MarkdownDescription: "Glue Schema registry AWS access key ID. Required if type is Glue with security `Credentials`",
									},
									"certificate": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS certificate. Required if type is Glue with security `IAMAnywhere`",
										MarkdownDescription: "Glue Schema registry AWS certificate. Required if type is Glue with security `IAMAnywhere`",
									},
									"certificate_chain": schema.StringAttribute{
										Optional:            true,
										Description:         "Schema registry SSL auth certificate chain PEM. Required if security type is `SSLAuth`",
										MarkdownDescription: "Schema registry SSL auth certificate chain PEM. Required if security type is `SSLAuth`",
									},
									"key": schema.StringAttribute{
										Optional:            true,
										Sensitive:           true,
										Description:         "Schema registry SSL auth private key PEM. Required if security type is `SSLAuth`",
										MarkdownDescription: "Schema registry SSL auth private key PEM. Required if security type is `SSLAuth`",
									},
									"password": schema.StringAttribute{
										Optional:            true,
										Sensitive:           true,
										Description:         "Schema registry basic auth password. Required if security type is `BasicAuth`",
										MarkdownDescription: "Schema registry basic auth password. Required if security type is `BasicAuth`",
									},
									"private_key": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS private key. Required if type is Glue with security `IAMAnywhere`",
										MarkdownDescription: "Glue Schema registry AWS private key. Required if type is Glue with security `IAMAnywhere`",
									},
									"profile": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS profile name. Required if type is Glue with security `FromContext`",
										MarkdownDescription: "Glue Schema registry AWS profile name. Required if type is Glue with security `FromContext`",
									},
									"profile_arn": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS profile ARN. Required if type is Glue with security `IAMAnywhere`",
										MarkdownDescription: "Glue Schema registry AWS profile ARN. Required if type is Glue with security `IAMAnywhere`",
									},
									"role": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS role ARN. Required if type is Glue with security `FromRole`",
										MarkdownDescription: "Glue Schema registry AWS role ARN. Required if type is Glue with security `FromRole`",
									},
									"role_arn": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS role ARN. Required if type is Glue with security `IAMAnywhere`",
										MarkdownDescription: "Glue Schema registry AWS role ARN. Required if type is Glue with security `IAMAnywhere`",
									},
									"secret_key": schema.StringAttribute{
										Optional:            true,
										Sensitive:           true,
										Description:         "Glue Schema registry AWS secret key. Required if type is Glue with security `Credentials`",
										MarkdownDescription: "Glue Schema registry AWS secret key. Required if type is Glue with security `Credentials`",
									},
									"token": schema.StringAttribute{
										Optional:            true,
										Sensitive:           true,
										Description:         "Schema registry bearer token. Required if security type is `BearerToken`",
										MarkdownDescription: "Schema registry bearer token. Required if security type is `BearerToken`",
									},
									"trust_anchor_arn": schema.StringAttribute{
										Optional:            true,
										Description:         "Glue Schema registry AWS trust anchor ARN. Required if type is Glue with security `IAMAnywhere`",
										MarkdownDescription: "Glue Schema registry AWS trust anchor ARN. Required if type is Glue with security `IAMAnywhere`",
									},
									"type": schema.StringAttribute{
										Required:            true,
										Description:         "Schema registry security type. Required if type is `ConfluentLike` or `Glue`.\n\nValid values are:\n\n- For **ConfluentLike** : `NoSecurity`, `BasicAuth`, `BearerToken`, `SSLAuth` \n\n- For **Glue** : `Credentials`, `FromContext`, `FromRole`, `IAMAnywhere`\n\n More detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#schema-registry)",
										MarkdownDescription: "Schema registry security type. Required if type is `ConfluentLike` or `Glue`.\n\nValid values are:\n\n- For **ConfluentLike** : `NoSecurity`, `BasicAuth`, `BearerToken`, `SSLAuth` \n\n- For **Glue** : `Credentials`, `FromContext`, `FromRole`, `IAMAnywhere`\n\n More detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#schema-registry)",
										Validators: []validator.String{
											stringvalidator.OneOf(validation.ValidSchemaRegistrySecurityTypes...),
										},
									},
									"username": schema.StringAttribute{
										Optional:            true,
										Description:         "Schema registry basic auth username. Required if security type is `BasicAuth`",
										MarkdownDescription: "Schema registry basic auth username. Required if security type is `BasicAuth`",
									},
								},
								CustomType: SecurityType{
									ObjectType: types.ObjectType{
										AttrTypes: SecurityValue{}.AttributeTypes(ctx),
									},
								},
								Required:            true,
								Description:         "Schema registry configuration. Required if type is `ConfluentLike` or `Glue`",
								MarkdownDescription: "Schema registry configuration. Required if type is `ConfluentLike` or `Glue`",
							},
							"type": schema.StringAttribute{
								Required:            true,
								Description:         "Schema registry type valid values are: `ConfluentLike`, `Glue`\n\nMore detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#schema-registry)",
								MarkdownDescription: "Schema registry type valid values are: `ConfluentLike`, `Glue`\n\nMore detail on our [documentation](https://docs.conduktor.io/platform/reference/resource-reference/console/#schema-registry)",
								Validators: []validator.String{
									stringvalidator.OneOf(validation.ValidSchemaRegistryTypes...),
								},
							},
							"url": schema.StringAttribute{
								Optional:            true,
								Description:         "Schema registry URL. Required if type is `ConfluentLike`",
								MarkdownDescription: "Schema registry URL. Required if type is `ConfluentLike`",
							},
						},
						CustomType: SchemaRegistryType{
							ObjectType: types.ObjectType{
								AttrTypes: SchemaRegistryValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Schema registry configuration",
						MarkdownDescription: "Schema registry configuration",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Kafka cluster specification",
				MarkdownDescription: "Kafka cluster specification",
			},
		},
	}
}

type ConsoleKafkaClusterV2Model struct {
	Labels types.Map    `tfsdk:"labels"`
	Name   types.String `tfsdk:"name"`
	Spec   SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bootstrapServersAttribute, ok := attributes["bootstrap_servers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootstrap_servers is missing from object`)

		return nil, diags
	}

	bootstrapServersVal, ok := bootstrapServersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootstrap_servers expected to be basetypes.StringValue, was: %T`, bootstrapServersAttribute))
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return nil, diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	iconAttribute, ok := attributes["icon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icon is missing from object`)

		return nil, diags
	}

	iconVal, ok := iconAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icon expected to be basetypes.StringValue, was: %T`, iconAttribute))
	}

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return nil, diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	kafkaFlavorAttribute, ok := attributes["kafka_flavor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kafka_flavor is missing from object`)

		return nil, diags
	}

	kafkaFlavorVal, ok := kafkaFlavorAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kafka_flavor expected to be basetypes.ObjectValue, was: %T`, kafkaFlavorAttribute))
	}

	propertiesAttribute, ok := attributes["properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`properties is missing from object`)

		return nil, diags
	}

	propertiesVal, ok := propertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`properties expected to be basetypes.MapValue, was: %T`, propertiesAttribute))
	}

	schemaRegistryAttribute, ok := attributes["schema_registry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_registry is missing from object`)

		return nil, diags
	}

	schemaRegistryVal, ok := schemaRegistryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_registry expected to be basetypes.ObjectValue, was: %T`, schemaRegistryAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		BootstrapServers:           bootstrapServersVal,
		Color:                      colorVal,
		DisplayName:                displayNameVal,
		Icon:                       iconVal,
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		KafkaFlavor:                kafkaFlavorVal,
		Properties:                 propertiesVal,
		SchemaRegistry:             schemaRegistryVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	bootstrapServersAttribute, ok := attributes["bootstrap_servers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootstrap_servers is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	bootstrapServersVal, ok := bootstrapServersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootstrap_servers expected to be basetypes.StringValue, was: %T`, bootstrapServersAttribute))
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	iconAttribute, ok := attributes["icon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`icon is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	iconVal, ok := iconAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`icon expected to be basetypes.StringValue, was: %T`, iconAttribute))
	}

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	kafkaFlavorAttribute, ok := attributes["kafka_flavor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kafka_flavor is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	kafkaFlavorVal, ok := kafkaFlavorAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kafka_flavor expected to be basetypes.ObjectValue, was: %T`, kafkaFlavorAttribute))
	}

	propertiesAttribute, ok := attributes["properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`properties is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	propertiesVal, ok := propertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`properties expected to be basetypes.MapValue, was: %T`, propertiesAttribute))
	}

	schemaRegistryAttribute, ok := attributes["schema_registry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema_registry is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	schemaRegistryVal, ok := schemaRegistryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema_registry expected to be basetypes.ObjectValue, was: %T`, schemaRegistryAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		BootstrapServers:           bootstrapServersVal,
		Color:                      colorVal,
		DisplayName:                displayNameVal,
		Icon:                       iconVal,
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		KafkaFlavor:                kafkaFlavorVal,
		Properties:                 propertiesVal,
		SchemaRegistry:             schemaRegistryVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	BootstrapServers           basetypes.StringValue `tfsdk:"bootstrap_servers"`
	Color                      basetypes.StringValue `tfsdk:"color"`
	DisplayName                basetypes.StringValue `tfsdk:"display_name"`
	Icon                       basetypes.StringValue `tfsdk:"icon"`
	IgnoreUntrustedCertificate basetypes.BoolValue   `tfsdk:"ignore_untrusted_certificate"`
	KafkaFlavor                basetypes.ObjectValue `tfsdk:"kafka_flavor"`
	Properties                 basetypes.MapValue    `tfsdk:"properties"`
	SchemaRegistry             basetypes.ObjectValue `tfsdk:"schema_registry"`
	state                      attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["bootstrap_servers"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["icon"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ignore_untrusted_certificate"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["kafka_flavor"] = basetypes.ObjectType{
		AttrTypes: KafkaFlavorValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["properties"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["schema_registry"] = basetypes.ObjectType{
		AttrTypes: SchemaRegistryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.BootstrapServers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bootstrap_servers"] = val

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.DisplayName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_name"] = val

		val, err = v.Icon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["icon"] = val

		val, err = v.IgnoreUntrustedCertificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ignore_untrusted_certificate"] = val

		val, err = v.KafkaFlavor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kafka_flavor"] = val

		val, err = v.Properties.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["properties"] = val

		val, err = v.SchemaRegistry.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema_registry"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var kafkaFlavor basetypes.ObjectValue

	if v.KafkaFlavor.IsNull() {
		kafkaFlavor = types.ObjectNull(
			KafkaFlavorValue{}.AttributeTypes(ctx),
		)
	}

	if v.KafkaFlavor.IsUnknown() {
		kafkaFlavor = types.ObjectUnknown(
			KafkaFlavorValue{}.AttributeTypes(ctx),
		)
	}

	if !v.KafkaFlavor.IsNull() && !v.KafkaFlavor.IsUnknown() {
		kafkaFlavor = types.ObjectValueMust(
			KafkaFlavorValue{}.AttributeTypes(ctx),
			v.KafkaFlavor.Attributes(),
		)
	}

	var schemaRegistry basetypes.ObjectValue

	if v.SchemaRegistry.IsNull() {
		schemaRegistry = types.ObjectNull(
			SchemaRegistryValue{}.AttributeTypes(ctx),
		)
	}

	if v.SchemaRegistry.IsUnknown() {
		schemaRegistry = types.ObjectUnknown(
			SchemaRegistryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.SchemaRegistry.IsNull() && !v.SchemaRegistry.IsUnknown() {
		schemaRegistry = types.ObjectValueMust(
			SchemaRegistryValue{}.AttributeTypes(ctx),
			v.SchemaRegistry.Attributes(),
		)
	}

	var propertiesVal basetypes.MapValue
	switch {
	case v.Properties.IsUnknown():
		propertiesVal = types.MapUnknown(types.StringType)
	case v.Properties.IsNull():
		propertiesVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		propertiesVal, d = types.MapValue(types.StringType, v.Properties.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"bootstrap_servers":            basetypes.StringType{},
			"color":                        basetypes.StringType{},
			"display_name":                 basetypes.StringType{},
			"icon":                         basetypes.StringType{},
			"ignore_untrusted_certificate": basetypes.BoolType{},
			"kafka_flavor": basetypes.ObjectType{
				AttrTypes: KafkaFlavorValue{}.AttributeTypes(ctx),
			},
			"properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"schema_registry": basetypes.ObjectType{
				AttrTypes: SchemaRegistryValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"bootstrap_servers":            basetypes.StringType{},
		"color":                        basetypes.StringType{},
		"display_name":                 basetypes.StringType{},
		"icon":                         basetypes.StringType{},
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"kafka_flavor": basetypes.ObjectType{
			AttrTypes: KafkaFlavorValue{}.AttributeTypes(ctx),
		},
		"properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"schema_registry": basetypes.ObjectType{
			AttrTypes: SchemaRegistryValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bootstrap_servers":            v.BootstrapServers,
			"color":                        v.Color,
			"display_name":                 v.DisplayName,
			"icon":                         v.Icon,
			"ignore_untrusted_certificate": v.IgnoreUntrustedCertificate,
			"kafka_flavor":                 kafkaFlavor,
			"properties":                   propertiesVal,
			"schema_registry":              schemaRegistry,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BootstrapServers.Equal(other.BootstrapServers) {
		return false
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.DisplayName.Equal(other.DisplayName) {
		return false
	}

	if !v.Icon.Equal(other.Icon) {
		return false
	}

	if !v.IgnoreUntrustedCertificate.Equal(other.IgnoreUntrustedCertificate) {
		return false
	}

	if !v.KafkaFlavor.Equal(other.KafkaFlavor) {
		return false
	}

	if !v.Properties.Equal(other.Properties) {
		return false
	}

	if !v.SchemaRegistry.Equal(other.SchemaRegistry) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bootstrap_servers":            basetypes.StringType{},
		"color":                        basetypes.StringType{},
		"display_name":                 basetypes.StringType{},
		"icon":                         basetypes.StringType{},
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"kafka_flavor": basetypes.ObjectType{
			AttrTypes: KafkaFlavorValue{}.AttributeTypes(ctx),
		},
		"properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"schema_registry": basetypes.ObjectType{
			AttrTypes: SchemaRegistryValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = KafkaFlavorType{}

type KafkaFlavorType struct {
	basetypes.ObjectType
}

func (t KafkaFlavorType) Equal(o attr.Type) bool {
	other, ok := o.(KafkaFlavorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t KafkaFlavorType) String() string {
	return "KafkaFlavorType"
}

func (t KafkaFlavorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiTokenAttribute, ok := attributes["api_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_token is missing from object`)

		return nil, diags
	}

	apiTokenVal, ok := apiTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_token expected to be basetypes.StringValue, was: %T`, apiTokenAttribute))
	}

	confluentClusterIdAttribute, ok := attributes["confluent_cluster_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`confluent_cluster_id is missing from object`)

		return nil, diags
	}

	confluentClusterIdVal, ok := confluentClusterIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`confluent_cluster_id expected to be basetypes.StringValue, was: %T`, confluentClusterIdAttribute))
	}

	confluentEnvironmentIdAttribute, ok := attributes["confluent_environment_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`confluent_environment_id is missing from object`)

		return nil, diags
	}

	confluentEnvironmentIdVal, ok := confluentEnvironmentIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`confluent_environment_id expected to be basetypes.StringValue, was: %T`, confluentEnvironmentIdAttribute))
	}

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return nil, diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	projectAttribute, ok := attributes["project"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project is missing from object`)

		return nil, diags
	}

	projectVal, ok := projectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project expected to be basetypes.StringValue, was: %T`, projectAttribute))
	}

	secretAttribute, ok := attributes["secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret is missing from object`)

		return nil, diags
	}

	secretVal, ok := secretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret expected to be basetypes.StringValue, was: %T`, secretAttribute))
	}

	serviceNameAttribute, ok := attributes["service_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_name is missing from object`)

		return nil, diags
	}

	serviceNameVal, ok := serviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_name expected to be basetypes.StringValue, was: %T`, serviceNameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return nil, diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	virtualClusterAttribute, ok := attributes["virtual_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_cluster is missing from object`)

		return nil, diags
	}

	virtualClusterVal, ok := virtualClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_cluster expected to be basetypes.StringValue, was: %T`, virtualClusterAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return KafkaFlavorValue{
		ApiToken:                   apiTokenVal,
		ConfluentClusterId:         confluentClusterIdVal,
		ConfluentEnvironmentId:     confluentEnvironmentIdVal,
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		Key:                        keyVal,
		Password:                   passwordVal,
		Project:                    projectVal,
		Secret:                     secretVal,
		ServiceName:                serviceNameVal,
		KafkaFlavorType:            typeVal,
		Url:                        urlVal,
		User:                       userVal,
		VirtualCluster:             virtualClusterVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewKafkaFlavorValueNull() KafkaFlavorValue {
	return KafkaFlavorValue{
		state: attr.ValueStateNull,
	}
}

func NewKafkaFlavorValueUnknown() KafkaFlavorValue {
	return KafkaFlavorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewKafkaFlavorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (KafkaFlavorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing KafkaFlavorValue Attribute Value",
				"While creating a KafkaFlavorValue value, a missing attribute value was detected. "+
					"A KafkaFlavorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KafkaFlavorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid KafkaFlavorValue Attribute Type",
				"While creating a KafkaFlavorValue value, an invalid attribute value was detected. "+
					"A KafkaFlavorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KafkaFlavorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("KafkaFlavorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra KafkaFlavorValue Attribute Value",
				"While creating a KafkaFlavorValue value, an extra attribute value was detected. "+
					"A KafkaFlavorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra KafkaFlavorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewKafkaFlavorValueUnknown(), diags
	}

	apiTokenAttribute, ok := attributes["api_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_token is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	apiTokenVal, ok := apiTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_token expected to be basetypes.StringValue, was: %T`, apiTokenAttribute))
	}

	confluentClusterIdAttribute, ok := attributes["confluent_cluster_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`confluent_cluster_id is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	confluentClusterIdVal, ok := confluentClusterIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`confluent_cluster_id expected to be basetypes.StringValue, was: %T`, confluentClusterIdAttribute))
	}

	confluentEnvironmentIdAttribute, ok := attributes["confluent_environment_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`confluent_environment_id is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	confluentEnvironmentIdVal, ok := confluentEnvironmentIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`confluent_environment_id expected to be basetypes.StringValue, was: %T`, confluentEnvironmentIdAttribute))
	}

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	projectAttribute, ok := attributes["project"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	projectVal, ok := projectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project expected to be basetypes.StringValue, was: %T`, projectAttribute))
	}

	secretAttribute, ok := attributes["secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	secretVal, ok := secretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret expected to be basetypes.StringValue, was: %T`, secretAttribute))
	}

	serviceNameAttribute, ok := attributes["service_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_name is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	serviceNameVal, ok := serviceNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_name expected to be basetypes.StringValue, was: %T`, serviceNameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	userVal, ok := userAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.StringValue, was: %T`, userAttribute))
	}

	virtualClusterAttribute, ok := attributes["virtual_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`virtual_cluster is missing from object`)

		return NewKafkaFlavorValueUnknown(), diags
	}

	virtualClusterVal, ok := virtualClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`virtual_cluster expected to be basetypes.StringValue, was: %T`, virtualClusterAttribute))
	}

	if diags.HasError() {
		return NewKafkaFlavorValueUnknown(), diags
	}

	return KafkaFlavorValue{
		ApiToken:                   apiTokenVal,
		ConfluentClusterId:         confluentClusterIdVal,
		ConfluentEnvironmentId:     confluentEnvironmentIdVal,
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		Key:                        keyVal,
		Password:                   passwordVal,
		Project:                    projectVal,
		Secret:                     secretVal,
		ServiceName:                serviceNameVal,
		KafkaFlavorType:            typeVal,
		Url:                        urlVal,
		User:                       userVal,
		VirtualCluster:             virtualClusterVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewKafkaFlavorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) KafkaFlavorValue {
	object, diags := NewKafkaFlavorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewKafkaFlavorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t KafkaFlavorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewKafkaFlavorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewKafkaFlavorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewKafkaFlavorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewKafkaFlavorValueMust(KafkaFlavorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t KafkaFlavorType) ValueType(ctx context.Context) attr.Value {
	return KafkaFlavorValue{}
}

var _ basetypes.ObjectValuable = KafkaFlavorValue{}

type KafkaFlavorValue struct {
	ApiToken                   basetypes.StringValue `tfsdk:"api_token"`
	ConfluentClusterId         basetypes.StringValue `tfsdk:"confluent_cluster_id"`
	ConfluentEnvironmentId     basetypes.StringValue `tfsdk:"confluent_environment_id"`
	IgnoreUntrustedCertificate basetypes.BoolValue   `tfsdk:"ignore_untrusted_certificate"`
	Key                        basetypes.StringValue `tfsdk:"key"`
	Password                   basetypes.StringValue `tfsdk:"password"`
	Project                    basetypes.StringValue `tfsdk:"project"`
	Secret                     basetypes.StringValue `tfsdk:"secret"`
	ServiceName                basetypes.StringValue `tfsdk:"service_name"`
	KafkaFlavorType            basetypes.StringValue `tfsdk:"type"`
	Url                        basetypes.StringValue `tfsdk:"url"`
	User                       basetypes.StringValue `tfsdk:"user"`
	VirtualCluster             basetypes.StringValue `tfsdk:"virtual_cluster"`
	state                      attr.ValueState
}

func (v KafkaFlavorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 13)

	var val tftypes.Value
	var err error

	attrTypes["api_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["confluent_cluster_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["confluent_environment_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ignore_untrusted_certificate"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["service_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["virtual_cluster"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 13)

		val, err = v.ApiToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_token"] = val

		val, err = v.ConfluentClusterId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["confluent_cluster_id"] = val

		val, err = v.ConfluentEnvironmentId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["confluent_environment_id"] = val

		val, err = v.IgnoreUntrustedCertificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ignore_untrusted_certificate"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Project.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project"] = val

		val, err = v.Secret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secret"] = val

		val, err = v.ServiceName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_name"] = val

		val, err = v.KafkaFlavorType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		val, err = v.User.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user"] = val

		val, err = v.VirtualCluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["virtual_cluster"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v KafkaFlavorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v KafkaFlavorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v KafkaFlavorValue) String() string {
	return "KafkaFlavorValue"
}

func (v KafkaFlavorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"api_token":                    basetypes.StringType{},
		"confluent_cluster_id":         basetypes.StringType{},
		"confluent_environment_id":     basetypes.StringType{},
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"key":                          basetypes.StringType{},
		"password":                     basetypes.StringType{},
		"project":                      basetypes.StringType{},
		"secret":                       basetypes.StringType{},
		"service_name":                 basetypes.StringType{},
		"type":                         basetypes.StringType{},
		"url":                          basetypes.StringType{},
		"user":                         basetypes.StringType{},
		"virtual_cluster":              basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_token":                    v.ApiToken,
			"confluent_cluster_id":         v.ConfluentClusterId,
			"confluent_environment_id":     v.ConfluentEnvironmentId,
			"ignore_untrusted_certificate": v.IgnoreUntrustedCertificate,
			"key":                          v.Key,
			"password":                     v.Password,
			"project":                      v.Project,
			"secret":                       v.Secret,
			"service_name":                 v.ServiceName,
			"type":                         v.KafkaFlavorType,
			"url":                          v.Url,
			"user":                         v.User,
			"virtual_cluster":              v.VirtualCluster,
		})

	return objVal, diags
}

func (v KafkaFlavorValue) Equal(o attr.Value) bool {
	other, ok := o.(KafkaFlavorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiToken.Equal(other.ApiToken) {
		return false
	}

	if !v.ConfluentClusterId.Equal(other.ConfluentClusterId) {
		return false
	}

	if !v.ConfluentEnvironmentId.Equal(other.ConfluentEnvironmentId) {
		return false
	}

	if !v.IgnoreUntrustedCertificate.Equal(other.IgnoreUntrustedCertificate) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Project.Equal(other.Project) {
		return false
	}

	if !v.Secret.Equal(other.Secret) {
		return false
	}

	if !v.ServiceName.Equal(other.ServiceName) {
		return false
	}

	if !v.KafkaFlavorType.Equal(other.KafkaFlavorType) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	if !v.User.Equal(other.User) {
		return false
	}

	if !v.VirtualCluster.Equal(other.VirtualCluster) {
		return false
	}

	return true
}

func (v KafkaFlavorValue) Type(ctx context.Context) attr.Type {
	return KafkaFlavorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v KafkaFlavorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_token":                    basetypes.StringType{},
		"confluent_cluster_id":         basetypes.StringType{},
		"confluent_environment_id":     basetypes.StringType{},
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"key":                          basetypes.StringType{},
		"password":                     basetypes.StringType{},
		"project":                      basetypes.StringType{},
		"secret":                       basetypes.StringType{},
		"service_name":                 basetypes.StringType{},
		"type":                         basetypes.StringType{},
		"url":                          basetypes.StringType{},
		"user":                         basetypes.StringType{},
		"virtual_cluster":              basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SchemaRegistryType{}

type SchemaRegistryType struct {
	basetypes.ObjectType
}

func (t SchemaRegistryType) Equal(o attr.Type) bool {
	other, ok := o.(SchemaRegistryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SchemaRegistryType) String() string {
	return "SchemaRegistryType"
}

func (t SchemaRegistryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return nil, diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	propertiesAttribute, ok := attributes["properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`properties is missing from object`)

		return nil, diags
	}

	propertiesVal, ok := propertiesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`properties expected to be basetypes.StringValue, was: %T`, propertiesAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return nil, diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	registryNameAttribute, ok := attributes["registry_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`registry_name is missing from object`)

		return nil, diags
	}

	registryNameVal, ok := registryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`registry_name expected to be basetypes.StringValue, was: %T`, registryNameAttribute))
	}

	securityAttribute, ok := attributes["security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security is missing from object`)

		return nil, diags
	}

	securityVal, ok := securityAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security expected to be basetypes.ObjectValue, was: %T`, securityAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SchemaRegistryValue{
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		Properties:                 propertiesVal,
		Region:                     regionVal,
		RegistryName:               registryNameVal,
		Security:                   securityVal,
		SchemaRegistryType:         typeVal,
		Url:                        urlVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewSchemaRegistryValueNull() SchemaRegistryValue {
	return SchemaRegistryValue{
		state: attr.ValueStateNull,
	}
}

func NewSchemaRegistryValueUnknown() SchemaRegistryValue {
	return SchemaRegistryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSchemaRegistryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SchemaRegistryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SchemaRegistryValue Attribute Value",
				"While creating a SchemaRegistryValue value, a missing attribute value was detected. "+
					"A SchemaRegistryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaRegistryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SchemaRegistryValue Attribute Type",
				"While creating a SchemaRegistryValue value, an invalid attribute value was detected. "+
					"A SchemaRegistryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SchemaRegistryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SchemaRegistryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SchemaRegistryValue Attribute Value",
				"While creating a SchemaRegistryValue value, an extra attribute value was detected. "+
					"A SchemaRegistryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SchemaRegistryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSchemaRegistryValueUnknown(), diags
	}

	ignoreUntrustedCertificateAttribute, ok := attributes["ignore_untrusted_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ignore_untrusted_certificate is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	ignoreUntrustedCertificateVal, ok := ignoreUntrustedCertificateAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ignore_untrusted_certificate expected to be basetypes.BoolValue, was: %T`, ignoreUntrustedCertificateAttribute))
	}

	propertiesAttribute, ok := attributes["properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`properties is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	propertiesVal, ok := propertiesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`properties expected to be basetypes.StringValue, was: %T`, propertiesAttribute))
	}

	regionAttribute, ok := attributes["region"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`region is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	regionVal, ok := regionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`region expected to be basetypes.StringValue, was: %T`, regionAttribute))
	}

	registryNameAttribute, ok := attributes["registry_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`registry_name is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	registryNameVal, ok := registryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`registry_name expected to be basetypes.StringValue, was: %T`, registryNameAttribute))
	}

	securityAttribute, ok := attributes["security"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`security is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	securityVal, ok := securityAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`security expected to be basetypes.ObjectValue, was: %T`, securityAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewSchemaRegistryValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewSchemaRegistryValueUnknown(), diags
	}

	return SchemaRegistryValue{
		IgnoreUntrustedCertificate: ignoreUntrustedCertificateVal,
		Properties:                 propertiesVal,
		Region:                     regionVal,
		RegistryName:               registryNameVal,
		Security:                   securityVal,
		SchemaRegistryType:         typeVal,
		Url:                        urlVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewSchemaRegistryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SchemaRegistryValue {
	object, diags := NewSchemaRegistryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSchemaRegistryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SchemaRegistryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSchemaRegistryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSchemaRegistryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSchemaRegistryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSchemaRegistryValueMust(SchemaRegistryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SchemaRegistryType) ValueType(ctx context.Context) attr.Value {
	return SchemaRegistryValue{}
}

var _ basetypes.ObjectValuable = SchemaRegistryValue{}

type SchemaRegistryValue struct {
	IgnoreUntrustedCertificate basetypes.BoolValue   `tfsdk:"ignore_untrusted_certificate"`
	Properties                 basetypes.StringValue `tfsdk:"properties"`
	Region                     basetypes.StringValue `tfsdk:"region"`
	RegistryName               basetypes.StringValue `tfsdk:"registry_name"`
	Security                   basetypes.ObjectValue `tfsdk:"security"`
	SchemaRegistryType         basetypes.StringValue `tfsdk:"type"`
	Url                        basetypes.StringValue `tfsdk:"url"`
	state                      attr.ValueState
}

func (v SchemaRegistryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["ignore_untrusted_certificate"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["properties"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["region"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["registry_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["security"] = basetypes.ObjectType{
		AttrTypes: SecurityValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.IgnoreUntrustedCertificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ignore_untrusted_certificate"] = val

		val, err = v.Properties.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["properties"] = val

		val, err = v.Region.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["region"] = val

		val, err = v.RegistryName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["registry_name"] = val

		val, err = v.Security.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["security"] = val

		val, err = v.SchemaRegistryType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SchemaRegistryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SchemaRegistryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SchemaRegistryValue) String() string {
	return "SchemaRegistryValue"
}

func (v SchemaRegistryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var security basetypes.ObjectValue

	if v.Security.IsNull() {
		security = types.ObjectNull(
			SecurityValue{}.AttributeTypes(ctx),
		)
	}

	if v.Security.IsUnknown() {
		security = types.ObjectUnknown(
			SecurityValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Security.IsNull() && !v.Security.IsUnknown() {
		security = types.ObjectValueMust(
			SecurityValue{}.AttributeTypes(ctx),
			v.Security.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"properties":                   basetypes.StringType{},
		"region":                       basetypes.StringType{},
		"registry_name":                basetypes.StringType{},
		"security": basetypes.ObjectType{
			AttrTypes: SecurityValue{}.AttributeTypes(ctx),
		},
		"type": basetypes.StringType{},
		"url":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ignore_untrusted_certificate": v.IgnoreUntrustedCertificate,
			"properties":                   v.Properties,
			"region":                       v.Region,
			"registry_name":                v.RegistryName,
			"security":                     security,
			"type":                         v.SchemaRegistryType,
			"url":                          v.Url,
		})

	return objVal, diags
}

func (v SchemaRegistryValue) Equal(o attr.Value) bool {
	other, ok := o.(SchemaRegistryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IgnoreUntrustedCertificate.Equal(other.IgnoreUntrustedCertificate) {
		return false
	}

	if !v.Properties.Equal(other.Properties) {
		return false
	}

	if !v.Region.Equal(other.Region) {
		return false
	}

	if !v.RegistryName.Equal(other.RegistryName) {
		return false
	}

	if !v.Security.Equal(other.Security) {
		return false
	}

	if !v.SchemaRegistryType.Equal(other.SchemaRegistryType) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v SchemaRegistryValue) Type(ctx context.Context) attr.Type {
	return SchemaRegistryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SchemaRegistryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ignore_untrusted_certificate": basetypes.BoolType{},
		"properties":                   basetypes.StringType{},
		"region":                       basetypes.StringType{},
		"registry_name":                basetypes.StringType{},
		"security": basetypes.ObjectType{
			AttrTypes: SecurityValue{}.AttributeTypes(ctx),
		},
		"type": basetypes.StringType{},
		"url":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SecurityType{}

type SecurityType struct {
	basetypes.ObjectType
}

func (t SecurityType) Equal(o attr.Type) bool {
	other, ok := o.(SecurityType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecurityType) String() string {
	return "SecurityType"
}

func (t SecurityType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accessKeyIdAttribute, ok := attributes["access_key_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_key_id is missing from object`)

		return nil, diags
	}

	accessKeyIdVal, ok := accessKeyIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_key_id expected to be basetypes.StringValue, was: %T`, accessKeyIdAttribute))
	}

	certificateAttribute, ok := attributes["certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certificate is missing from object`)

		return nil, diags
	}

	certificateVal, ok := certificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certificate expected to be basetypes.StringValue, was: %T`, certificateAttribute))
	}

	certificateChainAttribute, ok := attributes["certificate_chain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certificate_chain is missing from object`)

		return nil, diags
	}

	certificateChainVal, ok := certificateChainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certificate_chain expected to be basetypes.StringValue, was: %T`, certificateChainAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return nil, diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	profileArnAttribute, ok := attributes["profile_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile_arn is missing from object`)

		return nil, diags
	}

	profileArnVal, ok := profileArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile_arn expected to be basetypes.StringValue, was: %T`, profileArnAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return nil, diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	roleArnAttribute, ok := attributes["role_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role_arn is missing from object`)

		return nil, diags
	}

	roleArnVal, ok := roleArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role_arn expected to be basetypes.StringValue, was: %T`, roleArnAttribute))
	}

	secretKeyAttribute, ok := attributes["secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret_key is missing from object`)

		return nil, diags
	}

	secretKeyVal, ok := secretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret_key expected to be basetypes.StringValue, was: %T`, secretKeyAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	trustAnchorArnAttribute, ok := attributes["trust_anchor_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trust_anchor_arn is missing from object`)

		return nil, diags
	}

	trustAnchorArnVal, ok := trustAnchorArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trust_anchor_arn expected to be basetypes.StringValue, was: %T`, trustAnchorArnAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SecurityValue{
		AccessKeyId:      accessKeyIdVal,
		Certificate:      certificateVal,
		CertificateChain: certificateChainVal,
		Key:              keyVal,
		Password:         passwordVal,
		PrivateKey:       privateKeyVal,
		Profile:          profileVal,
		ProfileArn:       profileArnVal,
		Role:             roleVal,
		RoleArn:          roleArnVal,
		SecretKey:        secretKeyVal,
		Token:            tokenVal,
		TrustAnchorArn:   trustAnchorArnVal,
		SecurityType:     typeVal,
		Username:         usernameVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSecurityValueNull() SecurityValue {
	return SecurityValue{
		state: attr.ValueStateNull,
	}
}

func NewSecurityValueUnknown() SecurityValue {
	return SecurityValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecurityValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecurityValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecurityValue Attribute Value",
				"While creating a SecurityValue value, a missing attribute value was detected. "+
					"A SecurityValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecurityValue Attribute Type",
				"While creating a SecurityValue value, an invalid attribute value was detected. "+
					"A SecurityValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecurityValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecurityValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecurityValue Attribute Value",
				"While creating a SecurityValue value, an extra attribute value was detected. "+
					"A SecurityValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecurityValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecurityValueUnknown(), diags
	}

	accessKeyIdAttribute, ok := attributes["access_key_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_key_id is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	accessKeyIdVal, ok := accessKeyIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_key_id expected to be basetypes.StringValue, was: %T`, accessKeyIdAttribute))
	}

	certificateAttribute, ok := attributes["certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certificate is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	certificateVal, ok := certificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certificate expected to be basetypes.StringValue, was: %T`, certificateAttribute))
	}

	certificateChainAttribute, ok := attributes["certificate_chain"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`certificate_chain is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	certificateChainVal, ok := certificateChainAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`certificate_chain expected to be basetypes.StringValue, was: %T`, certificateChainAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	profileArnAttribute, ok := attributes["profile_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile_arn is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	profileArnVal, ok := profileArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile_arn expected to be basetypes.StringValue, was: %T`, profileArnAttribute))
	}

	roleAttribute, ok := attributes["role"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	roleVal, ok := roleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role expected to be basetypes.StringValue, was: %T`, roleAttribute))
	}

	roleArnAttribute, ok := attributes["role_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`role_arn is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	roleArnVal, ok := roleArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`role_arn expected to be basetypes.StringValue, was: %T`, roleArnAttribute))
	}

	secretKeyAttribute, ok := attributes["secret_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret_key is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	secretKeyVal, ok := secretKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret_key expected to be basetypes.StringValue, was: %T`, secretKeyAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	trustAnchorArnAttribute, ok := attributes["trust_anchor_arn"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trust_anchor_arn is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	trustAnchorArnVal, ok := trustAnchorArnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trust_anchor_arn expected to be basetypes.StringValue, was: %T`, trustAnchorArnAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewSecurityValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewSecurityValueUnknown(), diags
	}

	return SecurityValue{
		AccessKeyId:      accessKeyIdVal,
		Certificate:      certificateVal,
		CertificateChain: certificateChainVal,
		Key:              keyVal,
		Password:         passwordVal,
		PrivateKey:       privateKeyVal,
		Profile:          profileVal,
		ProfileArn:       profileArnVal,
		Role:             roleVal,
		RoleArn:          roleArnVal,
		SecretKey:        secretKeyVal,
		Token:            tokenVal,
		TrustAnchorArn:   trustAnchorArnVal,
		SecurityType:     typeVal,
		Username:         usernameVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSecurityValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecurityValue {
	object, diags := NewSecurityValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecurityValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecurityType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecurityValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecurityValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecurityValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecurityValueMust(SecurityValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecurityType) ValueType(ctx context.Context) attr.Value {
	return SecurityValue{}
}

var _ basetypes.ObjectValuable = SecurityValue{}

type SecurityValue struct {
	AccessKeyId      basetypes.StringValue `tfsdk:"access_key_id"`
	Certificate      basetypes.StringValue `tfsdk:"certificate"`
	CertificateChain basetypes.StringValue `tfsdk:"certificate_chain"`
	Key              basetypes.StringValue `tfsdk:"key"`
	Password         basetypes.StringValue `tfsdk:"password"`
	PrivateKey       basetypes.StringValue `tfsdk:"private_key"`
	Profile          basetypes.StringValue `tfsdk:"profile"`
	ProfileArn       basetypes.StringValue `tfsdk:"profile_arn"`
	Role             basetypes.StringValue `tfsdk:"role"`
	RoleArn          basetypes.StringValue `tfsdk:"role_arn"`
	SecretKey        basetypes.StringValue `tfsdk:"secret_key"`
	Token            basetypes.StringValue `tfsdk:"token"`
	TrustAnchorArn   basetypes.StringValue `tfsdk:"trust_anchor_arn"`
	SecurityType     basetypes.StringValue `tfsdk:"type"`
	Username         basetypes.StringValue `tfsdk:"username"`
	state            attr.ValueState
}

func (v SecurityValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 15)

	var val tftypes.Value
	var err error

	attrTypes["access_key_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["certificate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["certificate_chain"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["profile_arn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["role"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["role_arn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["secret_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["trust_anchor_arn"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 15)

		val, err = v.AccessKeyId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["access_key_id"] = val

		val, err = v.Certificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["certificate"] = val

		val, err = v.CertificateChain.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["certificate_chain"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.PrivateKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_key"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		val, err = v.ProfileArn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile_arn"] = val

		val, err = v.Role.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role"] = val

		val, err = v.RoleArn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["role_arn"] = val

		val, err = v.SecretKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secret_key"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.TrustAnchorArn.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["trust_anchor_arn"] = val

		val, err = v.SecurityType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecurityValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecurityValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecurityValue) String() string {
	return "SecurityValue"
}

func (v SecurityValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"access_key_id":     basetypes.StringType{},
		"certificate":       basetypes.StringType{},
		"certificate_chain": basetypes.StringType{},
		"key":               basetypes.StringType{},
		"password":          basetypes.StringType{},
		"private_key":       basetypes.StringType{},
		"profile":           basetypes.StringType{},
		"profile_arn":       basetypes.StringType{},
		"role":              basetypes.StringType{},
		"role_arn":          basetypes.StringType{},
		"secret_key":        basetypes.StringType{},
		"token":             basetypes.StringType{},
		"trust_anchor_arn":  basetypes.StringType{},
		"type":              basetypes.StringType{},
		"username":          basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"access_key_id":     v.AccessKeyId,
			"certificate":       v.Certificate,
			"certificate_chain": v.CertificateChain,
			"key":               v.Key,
			"password":          v.Password,
			"private_key":       v.PrivateKey,
			"profile":           v.Profile,
			"profile_arn":       v.ProfileArn,
			"role":              v.Role,
			"role_arn":          v.RoleArn,
			"secret_key":        v.SecretKey,
			"token":             v.Token,
			"trust_anchor_arn":  v.TrustAnchorArn,
			"type":              v.SecurityType,
			"username":          v.Username,
		})

	return objVal, diags
}

func (v SecurityValue) Equal(o attr.Value) bool {
	other, ok := o.(SecurityValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccessKeyId.Equal(other.AccessKeyId) {
		return false
	}

	if !v.Certificate.Equal(other.Certificate) {
		return false
	}

	if !v.CertificateChain.Equal(other.CertificateChain) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.PrivateKey.Equal(other.PrivateKey) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	if !v.ProfileArn.Equal(other.ProfileArn) {
		return false
	}

	if !v.Role.Equal(other.Role) {
		return false
	}

	if !v.RoleArn.Equal(other.RoleArn) {
		return false
	}

	if !v.SecretKey.Equal(other.SecretKey) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.TrustAnchorArn.Equal(other.TrustAnchorArn) {
		return false
	}

	if !v.SecurityType.Equal(other.SecurityType) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v SecurityValue) Type(ctx context.Context) attr.Type {
	return SecurityType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecurityValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"access_key_id":     basetypes.StringType{},
		"certificate":       basetypes.StringType{},
		"certificate_chain": basetypes.StringType{},
		"key":               basetypes.StringType{},
		"password":          basetypes.StringType{},
		"private_key":       basetypes.StringType{},
		"profile":           basetypes.StringType{},
		"profile_arn":       basetypes.StringType{},
		"role":              basetypes.StringType{},
		"role_arn":          basetypes.StringType{},
		"secret_key":        basetypes.StringType{},
		"token":             basetypes.StringType{},
		"trust_anchor_arn":  basetypes.StringType{},
		"type":              basetypes.StringType{},
		"username":          basetypes.StringType{},
	}
}
