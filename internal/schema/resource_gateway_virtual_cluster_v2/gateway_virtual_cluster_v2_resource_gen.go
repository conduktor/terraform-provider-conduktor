// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_gateway_virtual_cluster_v2

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/validation"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GatewayVirtualClusterV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the virtual cluster, must be unique, acts as an ID for import",
				MarkdownDescription: "The name of the virtual cluster, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
				},
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"acl_enabled": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Enable ACL checks on all Kafka API calls to this virtual cluster. Depending on the value of the `acl_mode` field, acls are required to be set in different ways. See the `acl_mode` field for more details",
						MarkdownDescription: "Enable ACL checks on all Kafka API calls to this virtual cluster. Depending on the value of the `acl_mode` field, acls are required to be set in different ways. See the `acl_mode` field for more details",
					},
					"acl_mode": schema.StringAttribute{
						Optional:            true,
						Description:         "The mode defines how the ACLs will be managed on the virtual cluster. Can only be either KAFKA_API or REST_API. See [documentation](https://docs.conduktor.io/guide/reference/gateway-reference#virtualcluster) for more information",
						MarkdownDescription: "The mode defines how the ACLs will be managed on the virtual cluster. Can only be either KAFKA_API or REST_API. See [documentation](https://docs.conduktor.io/guide/reference/gateway-reference#virtualcluster) for more information",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidVirtualClusterACLModes...),
						},
					},
					"acls": schema.SetNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"host": schema.StringAttribute{
									Required:            true,
									Description:         "Host of the ACL",
									MarkdownDescription: "Host of the ACL",
								},
								"operation": schema.StringAttribute{
									Required:            true,
									Description:         "Set of all operations to apply on the resource. Valid values are: `ALL`, `ALTER`, `ALTER_CONFIGS`, `CLUSTER_ACTION`, `CREATE`, `CREATE_TOKENS`, `DELETE`, `DESCRIBE`, `DESCRIBE_CONFIGS`, `DESCRIBE_TOKENS`, `IDEMPOTENT_WRITE`, `READ`, `UNKNOWN`, `WRITE`",
									MarkdownDescription: "Set of all operations to apply on the resource. Valid values are: `ALL`, `ALTER`, `ALTER_CONFIGS`, `CLUSTER_ACTION`, `CREATE`, `CREATE_TOKENS`, `DELETE`, `DESCRIBE`, `DESCRIBE_CONFIGS`, `DESCRIBE_TOKENS`, `IDEMPOTENT_WRITE`, `READ`, `UNKNOWN`, `WRITE`",
									Validators: []validator.String{
										stringvalidator.OneOf(validation.ValidVirtualClusterACLsOperations...),
									},
								},
								"permission_type": schema.StringAttribute{
									Required:            true,
									Description:         "Permission Type for Access Control Entry. Valid values are: ALLOW, DENY",
									MarkdownDescription: "Permission Type for Access Control Entry. Valid values are: ALLOW, DENY",
									Validators: []validator.String{
										stringvalidator.OneOf(validation.ValidVirtualClusterACLsPermissionTypes...),
									},
								},
								"principal": schema.StringAttribute{
									Required:            true,
									Description:         "Who or what the ACL applies to",
									MarkdownDescription: "Who or what the ACL applies to",
								},
								"resource_pattern": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Required:            true,
											Description:         "The name or pattern matching the name associated with the resource. Wildcards (e.g. `*`) are supported",
											MarkdownDescription: "The name or pattern matching the name associated with the resource. Wildcards (e.g. `*`) are supported",
										},
										"pattern_type": schema.StringAttribute{
											Required:            true,
											Description:         "Type of the pattern to apply ACL on. Valid values are: `ANY`, `LITERAL`, `MATCH`, `PREFIXED`, `UNKNOWN`",
											MarkdownDescription: "Type of the pattern to apply ACL on. Valid values are: `ANY`, `LITERAL`, `MATCH`, `PREFIXED`, `UNKNOWN`",
											Validators: []validator.String{
												stringvalidator.OneOf(validation.ValidVirtualClusterACLsPatternTypes...),
											},
										},
										"resource_type": schema.StringAttribute{
											Required:            true,
											Description:         "Type of the resource to apply ACL on. Valid values are: `ANY`, `CLUSTER`, `DELEGATION_TOKEN`, `GROUP`, `TOPIC`, `TRANSACTIONAL_ID`, `UNKNOWN`",
											MarkdownDescription: "Type of the resource to apply ACL on. Valid values are: `ANY`, `CLUSTER`, `DELEGATION_TOKEN`, `GROUP`, `TOPIC`, `TRANSACTIONAL_ID`, `UNKNOWN`",
											Validators: []validator.String{
												stringvalidator.OneOf(validation.ValidVirtualClusterACLsResourceTypes...),
											},
										},
									},
									CustomType: ResourcePatternType{
										ObjectType: types.ObjectType{
											AttrTypes: ResourcePatternValue{}.AttributeTypes(ctx),
										},
									},
									Required:            true,
									Description:         "The resource pattern to apply the ACL to",
									MarkdownDescription: "The resource pattern to apply the ACL to",
								},
							},
							CustomType: AclsType{
								ObjectType: types.ObjectType{
									AttrTypes: AclsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Description:         "List of ACL bindings for the virtual cluster. Only required if `spec.acl_mode` is set to `REST_API`. See [documentation](https://docs.conduktor.io/guide/reference/gateway-reference#virtualcluster) for more information",
						MarkdownDescription: "List of ACL bindings for the virtual cluster. Only required if `spec.acl_mode` is set to `REST_API`. See [documentation](https://docs.conduktor.io/guide/reference/gateway-reference#virtualcluster) for more information",
					},
					"bootstrap_servers": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The bootstrap servers to create a connection to the virtual cluster. This field is automatically managed by the gateway",
						MarkdownDescription: "The bootstrap servers to create a connection to the virtual cluster. This field is automatically managed by the gateway",
					},
					"client_properties": schema.MapAttribute{
						ElementType: types.MapType{
							ElemType: types.StringType,
						},
						Optional:            true,
						Description:         "Depending on gateway config, different kind of authentication can be used: `MTLS`, `PLAIN` and `OAUTHBEARER`",
						MarkdownDescription: "Depending on gateway config, different kind of authentication can be used: `MTLS`, `PLAIN` and `OAUTHBEARER`",
					},
					"super_users": schema.SetAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of usernames for which the associated service accounts in this virtual cluster can bypass ACLs. Required only if `spec.acl_mode` is set to `KAFKA_API`",
						MarkdownDescription: "List of usernames for which the associated service accounts in this virtual cluster can bypass ACLs. Required only if `spec.acl_mode` is set to `KAFKA_API`",
					},
					"type": schema.StringAttribute{
						Optional:            true,
						Description:         "The type of the virtual cluster. Can only be either `Standard` or `Partner`",
						MarkdownDescription: "The type of the virtual cluster. Can only be either `Standard` or `Partner`",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidVirtualClusterTypes...),
						},
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Virtual Cluster specification",
				MarkdownDescription: "Virtual Cluster specification",
			},
		},
	}
}

type GatewayVirtualClusterV2Model struct {
	Name types.String `tfsdk:"name"`
	Spec SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aclEnabledAttribute, ok := attributes["acl_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acl_enabled is missing from object`)

		return nil, diags
	}

	aclEnabledVal, ok := aclEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acl_enabled expected to be basetypes.BoolValue, was: %T`, aclEnabledAttribute))
	}

	aclModeAttribute, ok := attributes["acl_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acl_mode is missing from object`)

		return nil, diags
	}

	aclModeVal, ok := aclModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acl_mode expected to be basetypes.StringValue, was: %T`, aclModeAttribute))
	}

	aclsAttribute, ok := attributes["acls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acls is missing from object`)

		return nil, diags
	}

	aclsVal, ok := aclsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acls expected to be basetypes.SetValue, was: %T`, aclsAttribute))
	}

	bootstrapServersAttribute, ok := attributes["bootstrap_servers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootstrap_servers is missing from object`)

		return nil, diags
	}

	bootstrapServersVal, ok := bootstrapServersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootstrap_servers expected to be basetypes.StringValue, was: %T`, bootstrapServersAttribute))
	}

	clientPropertiesAttribute, ok := attributes["client_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_properties is missing from object`)

		return nil, diags
	}

	clientPropertiesVal, ok := clientPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_properties expected to be basetypes.MapValue, was: %T`, clientPropertiesAttribute))
	}

	superUsersAttribute, ok := attributes["super_users"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`super_users is missing from object`)

		return nil, diags
	}

	superUsersVal, ok := superUsersAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`super_users expected to be basetypes.SetValue, was: %T`, superUsersAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		AclEnabled:       aclEnabledVal,
		AclMode:          aclModeVal,
		Acls:             aclsVal,
		BootstrapServers: bootstrapServersVal,
		ClientProperties: clientPropertiesVal,
		SuperUsers:       superUsersVal,
		SpecType:         typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	aclEnabledAttribute, ok := attributes["acl_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acl_enabled is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	aclEnabledVal, ok := aclEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acl_enabled expected to be basetypes.BoolValue, was: %T`, aclEnabledAttribute))
	}

	aclModeAttribute, ok := attributes["acl_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acl_mode is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	aclModeVal, ok := aclModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acl_mode expected to be basetypes.StringValue, was: %T`, aclModeAttribute))
	}

	aclsAttribute, ok := attributes["acls"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`acls is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	aclsVal, ok := aclsAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`acls expected to be basetypes.SetValue, was: %T`, aclsAttribute))
	}

	bootstrapServersAttribute, ok := attributes["bootstrap_servers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bootstrap_servers is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	bootstrapServersVal, ok := bootstrapServersAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bootstrap_servers expected to be basetypes.StringValue, was: %T`, bootstrapServersAttribute))
	}

	clientPropertiesAttribute, ok := attributes["client_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_properties is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	clientPropertiesVal, ok := clientPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_properties expected to be basetypes.MapValue, was: %T`, clientPropertiesAttribute))
	}

	superUsersAttribute, ok := attributes["super_users"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`super_users is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	superUsersVal, ok := superUsersAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`super_users expected to be basetypes.SetValue, was: %T`, superUsersAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		AclEnabled:       aclEnabledVal,
		AclMode:          aclModeVal,
		Acls:             aclsVal,
		BootstrapServers: bootstrapServersVal,
		ClientProperties: clientPropertiesVal,
		SuperUsers:       superUsersVal,
		SpecType:         typeVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	AclEnabled       basetypes.BoolValue   `tfsdk:"acl_enabled"`
	AclMode          basetypes.StringValue `tfsdk:"acl_mode"`
	Acls             basetypes.SetValue    `tfsdk:"acls"`
	BootstrapServers basetypes.StringValue `tfsdk:"bootstrap_servers"`
	ClientProperties basetypes.MapValue    `tfsdk:"client_properties"`
	SuperUsers       basetypes.SetValue    `tfsdk:"super_users"`
	SpecType         basetypes.StringValue `tfsdk:"type"`
	state            attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["acl_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["acl_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["acls"] = basetypes.SetType{
		ElemType: AclsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["bootstrap_servers"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_properties"] = basetypes.MapType{
		ElemType: types.MapType{
			ElemType: types.StringType,
		},
	}.TerraformType(ctx)
	attrTypes["super_users"] = basetypes.SetType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.AclEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["acl_enabled"] = val

		val, err = v.AclMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["acl_mode"] = val

		val, err = v.Acls.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["acls"] = val

		val, err = v.BootstrapServers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bootstrap_servers"] = val

		val, err = v.ClientProperties.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_properties"] = val

		val, err = v.SuperUsers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["super_users"] = val

		val, err = v.SpecType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	acls := types.SetValueMust(
		AclsType{
			basetypes.ObjectType{
				AttrTypes: AclsValue{}.AttributeTypes(ctx),
			},
		},
		v.Acls.Elements(),
	)

	if v.Acls.IsNull() {
		acls = types.SetNull(
			AclsType{
				basetypes.ObjectType{
					AttrTypes: AclsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Acls.IsUnknown() {
		acls = types.SetUnknown(
			AclsType{
				basetypes.ObjectType{
					AttrTypes: AclsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var clientPropertiesVal basetypes.MapValue
	switch {
	case v.ClientProperties.IsUnknown():
		clientPropertiesVal = types.MapUnknown(types.MapType{
			ElemType: types.StringType,
		})
	case v.ClientProperties.IsNull():
		clientPropertiesVal = types.MapNull(types.MapType{
			ElemType: types.StringType,
		})
	default:
		var d diag.Diagnostics
		clientPropertiesVal, d = types.MapValue(types.MapType{
			ElemType: types.StringType,
		}, v.ClientProperties.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"acl_enabled": basetypes.BoolType{},
			"acl_mode":    basetypes.StringType{},
			"acls": basetypes.SetType{
				ElemType: AclsValue{}.Type(ctx),
			},
			"bootstrap_servers": basetypes.StringType{},
			"client_properties": basetypes.MapType{
				ElemType: types.MapType{
					ElemType: types.StringType,
				},
			},
			"super_users": basetypes.SetType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		}), diags
	}

	var superUsersVal basetypes.SetValue
	switch {
	case v.SuperUsers.IsUnknown():
		superUsersVal = types.SetUnknown(types.StringType)
	case v.SuperUsers.IsNull():
		superUsersVal = types.SetNull(types.StringType)
	default:
		var d diag.Diagnostics
		superUsersVal, d = types.SetValue(types.StringType, v.SuperUsers.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"acl_enabled": basetypes.BoolType{},
			"acl_mode":    basetypes.StringType{},
			"acls": basetypes.SetType{
				ElemType: AclsValue{}.Type(ctx),
			},
			"bootstrap_servers": basetypes.StringType{},
			"client_properties": basetypes.MapType{
				ElemType: types.MapType{
					ElemType: types.StringType,
				},
			},
			"super_users": basetypes.SetType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"acl_enabled": basetypes.BoolType{},
		"acl_mode":    basetypes.StringType{},
		"acls": basetypes.SetType{
			ElemType: AclsValue{}.Type(ctx),
		},
		"bootstrap_servers": basetypes.StringType{},
		"client_properties": basetypes.MapType{
			ElemType: types.MapType{
				ElemType: types.StringType,
			},
		},
		"super_users": basetypes.SetType{
			ElemType: types.StringType,
		},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"acl_enabled":       v.AclEnabled,
			"acl_mode":          v.AclMode,
			"acls":              acls,
			"bootstrap_servers": v.BootstrapServers,
			"client_properties": clientPropertiesVal,
			"super_users":       superUsersVal,
			"type":              v.SpecType,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AclEnabled.Equal(other.AclEnabled) {
		return false
	}

	if !v.AclMode.Equal(other.AclMode) {
		return false
	}

	if !v.Acls.Equal(other.Acls) {
		return false
	}

	if !v.BootstrapServers.Equal(other.BootstrapServers) {
		return false
	}

	if !v.ClientProperties.Equal(other.ClientProperties) {
		return false
	}

	if !v.SuperUsers.Equal(other.SuperUsers) {
		return false
	}

	if !v.SpecType.Equal(other.SpecType) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"acl_enabled": basetypes.BoolType{},
		"acl_mode":    basetypes.StringType{},
		"acls": basetypes.SetType{
			ElemType: AclsValue{}.Type(ctx),
		},
		"bootstrap_servers": basetypes.StringType{},
		"client_properties": basetypes.MapType{
			ElemType: types.MapType{
				ElemType: types.StringType,
			},
		},
		"super_users": basetypes.SetType{
			ElemType: types.StringType,
		},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AclsType{}

type AclsType struct {
	basetypes.ObjectType
}

func (t AclsType) Equal(o attr.Type) bool {
	other, ok := o.(AclsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AclsType) String() string {
	return "AclsType"
}

func (t AclsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	operationAttribute, ok := attributes["operation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operation is missing from object`)

		return nil, diags
	}

	operationVal, ok := operationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operation expected to be basetypes.StringValue, was: %T`, operationAttribute))
	}

	permissionTypeAttribute, ok := attributes["permission_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permission_type is missing from object`)

		return nil, diags
	}

	permissionTypeVal, ok := permissionTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permission_type expected to be basetypes.StringValue, was: %T`, permissionTypeAttribute))
	}

	principalAttribute, ok := attributes["principal"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`principal is missing from object`)

		return nil, diags
	}

	principalVal, ok := principalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`principal expected to be basetypes.StringValue, was: %T`, principalAttribute))
	}

	resourcePatternAttribute, ok := attributes["resource_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_pattern is missing from object`)

		return nil, diags
	}

	resourcePatternVal, ok := resourcePatternAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_pattern expected to be basetypes.ObjectValue, was: %T`, resourcePatternAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AclsValue{
		Host:            hostVal,
		Operation:       operationVal,
		PermissionType:  permissionTypeVal,
		Principal:       principalVal,
		ResourcePattern: resourcePatternVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAclsValueNull() AclsValue {
	return AclsValue{
		state: attr.ValueStateNull,
	}
}

func NewAclsValueUnknown() AclsValue {
	return AclsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAclsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AclsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AclsValue Attribute Value",
				"While creating a AclsValue value, a missing attribute value was detected. "+
					"A AclsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AclsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AclsValue Attribute Type",
				"While creating a AclsValue value, an invalid attribute value was detected. "+
					"A AclsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AclsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AclsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AclsValue Attribute Value",
				"While creating a AclsValue value, an extra attribute value was detected. "+
					"A AclsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AclsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAclsValueUnknown(), diags
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewAclsValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	operationAttribute, ok := attributes["operation"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operation is missing from object`)

		return NewAclsValueUnknown(), diags
	}

	operationVal, ok := operationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operation expected to be basetypes.StringValue, was: %T`, operationAttribute))
	}

	permissionTypeAttribute, ok := attributes["permission_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`permission_type is missing from object`)

		return NewAclsValueUnknown(), diags
	}

	permissionTypeVal, ok := permissionTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`permission_type expected to be basetypes.StringValue, was: %T`, permissionTypeAttribute))
	}

	principalAttribute, ok := attributes["principal"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`principal is missing from object`)

		return NewAclsValueUnknown(), diags
	}

	principalVal, ok := principalAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`principal expected to be basetypes.StringValue, was: %T`, principalAttribute))
	}

	resourcePatternAttribute, ok := attributes["resource_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_pattern is missing from object`)

		return NewAclsValueUnknown(), diags
	}

	resourcePatternVal, ok := resourcePatternAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_pattern expected to be basetypes.ObjectValue, was: %T`, resourcePatternAttribute))
	}

	if diags.HasError() {
		return NewAclsValueUnknown(), diags
	}

	return AclsValue{
		Host:            hostVal,
		Operation:       operationVal,
		PermissionType:  permissionTypeVal,
		Principal:       principalVal,
		ResourcePattern: resourcePatternVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewAclsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AclsValue {
	object, diags := NewAclsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAclsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AclsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAclsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAclsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAclsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAclsValueMust(AclsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AclsType) ValueType(ctx context.Context) attr.Value {
	return AclsValue{}
}

var _ basetypes.ObjectValuable = AclsValue{}

type AclsValue struct {
	Host            basetypes.StringValue `tfsdk:"host"`
	Operation       basetypes.StringValue `tfsdk:"operation"`
	PermissionType  basetypes.StringValue `tfsdk:"permission_type"`
	Principal       basetypes.StringValue `tfsdk:"principal"`
	ResourcePattern basetypes.ObjectValue `tfsdk:"resource_pattern"`
	state           attr.ValueState
}

func (v AclsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operation"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["permission_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["principal"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_pattern"] = basetypes.ObjectType{
		AttrTypes: ResourcePatternValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.Operation.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operation"] = val

		val, err = v.PermissionType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["permission_type"] = val

		val, err = v.Principal.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["principal"] = val

		val, err = v.ResourcePattern.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_pattern"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AclsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AclsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AclsValue) String() string {
	return "AclsValue"
}

func (v AclsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourcePatternVal basetypes.ObjectValue

	if v.ResourcePattern.IsNull() {
		resourcePatternVal = types.ObjectNull(
			ResourcePatternValue{}.AttributeTypes(ctx),
		)
	}

	if v.ResourcePattern.IsUnknown() {
		resourcePatternVal = types.ObjectUnknown(
			ResourcePatternValue{}.AttributeTypes(ctx),
		)
	}

	if !v.ResourcePattern.IsNull() && !v.ResourcePattern.IsUnknown() {
		resourcePatternVal = types.ObjectValueMust(
			ResourcePatternValue{}.AttributeTypes(ctx),
			v.ResourcePattern.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"host":            basetypes.StringType{},
		"operation":       basetypes.StringType{},
		"permission_type": basetypes.StringType{},
		"principal":       basetypes.StringType{},
		"resource_pattern": basetypes.ObjectType{
			AttrTypes: ResourcePatternValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"host":             v.Host,
			"operation":        v.Operation,
			"permission_type":  v.PermissionType,
			"principal":        v.Principal,
			"resource_pattern": resourcePatternVal,
		})

	return objVal, diags
}

func (v AclsValue) Equal(o attr.Value) bool {
	other, ok := o.(AclsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.Operation.Equal(other.Operation) {
		return false
	}

	if !v.PermissionType.Equal(other.PermissionType) {
		return false
	}

	if !v.Principal.Equal(other.Principal) {
		return false
	}

	if !v.ResourcePattern.Equal(other.ResourcePattern) {
		return false
	}

	return true
}

func (v AclsValue) Type(ctx context.Context) attr.Type {
	return AclsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AclsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"host":            basetypes.StringType{},
		"operation":       basetypes.StringType{},
		"permission_type": basetypes.StringType{},
		"principal":       basetypes.StringType{},
		"resource_pattern": basetypes.ObjectType{
			AttrTypes: ResourcePatternValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ResourcePatternType{}

type ResourcePatternType struct {
	basetypes.ObjectType
}

func (t ResourcePatternType) Equal(o attr.Type) bool {
	other, ok := o.(ResourcePatternType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResourcePatternType) String() string {
	return "ResourcePatternType"
}

func (t ResourcePatternType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return nil, diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	resourceTypeAttribute, ok := attributes["resource_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_type is missing from object`)

		return nil, diags
	}

	resourceTypeVal, ok := resourceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_type expected to be basetypes.StringValue, was: %T`, resourceTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResourcePatternValue{
		Name:         nameVal,
		PatternType:  patternTypeVal,
		ResourceType: resourceTypeVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewResourcePatternValueNull() ResourcePatternValue {
	return ResourcePatternValue{
		state: attr.ValueStateNull,
	}
}

func NewResourcePatternValueUnknown() ResourcePatternValue {
	return ResourcePatternValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResourcePatternValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResourcePatternValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResourcePatternValue Attribute Value",
				"While creating a ResourcePatternValue value, a missing attribute value was detected. "+
					"A ResourcePatternValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcePatternValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResourcePatternValue Attribute Type",
				"While creating a ResourcePatternValue value, an invalid attribute value was detected. "+
					"A ResourcePatternValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcePatternValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResourcePatternValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResourcePatternValue Attribute Value",
				"While creating a ResourcePatternValue value, an extra attribute value was detected. "+
					"A ResourcePatternValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResourcePatternValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResourcePatternValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewResourcePatternValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return NewResourcePatternValueUnknown(), diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	resourceTypeAttribute, ok := attributes["resource_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_type is missing from object`)

		return NewResourcePatternValueUnknown(), diags
	}

	resourceTypeVal, ok := resourceTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_type expected to be basetypes.StringValue, was: %T`, resourceTypeAttribute))
	}

	if diags.HasError() {
		return NewResourcePatternValueUnknown(), diags
	}

	return ResourcePatternValue{
		Name:         nameVal,
		PatternType:  patternTypeVal,
		ResourceType: resourceTypeVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewResourcePatternValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResourcePatternValue {
	object, diags := NewResourcePatternValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResourcePatternValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResourcePatternType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResourcePatternValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResourcePatternValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourcePatternValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResourcePatternValueMust(ResourcePatternValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResourcePatternType) ValueType(ctx context.Context) attr.Value {
	return ResourcePatternValue{}
}

var _ basetypes.ObjectValuable = ResourcePatternValue{}

type ResourcePatternValue struct {
	Name         basetypes.StringValue `tfsdk:"name"`
	PatternType  basetypes.StringValue `tfsdk:"pattern_type"`
	ResourceType basetypes.StringValue `tfsdk:"resource_type"`
	state        attr.ValueState
}

func (v ResourcePatternValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["pattern_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PatternType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pattern_type"] = val

		val, err = v.ResourceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResourcePatternValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResourcePatternValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResourcePatternValue) String() string {
	return "ResourcePatternValue"
}

func (v ResourcePatternValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":          basetypes.StringType{},
		"pattern_type":  basetypes.StringType{},
		"resource_type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":          v.Name,
			"pattern_type":  v.PatternType,
			"resource_type": v.ResourceType,
		})

	return objVal, diags
}

func (v ResourcePatternValue) Equal(o attr.Value) bool {
	other, ok := o.(ResourcePatternValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PatternType.Equal(other.PatternType) {
		return false
	}

	if !v.ResourceType.Equal(other.ResourceType) {
		return false
	}

	return true
}

func (v ResourcePatternValue) Type(ctx context.Context) attr.Type {
	return ResourcePatternType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResourcePatternValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":          basetypes.StringType{},
		"pattern_type":  basetypes.StringType{},
		"resource_type": basetypes.StringType{},
	}
}
