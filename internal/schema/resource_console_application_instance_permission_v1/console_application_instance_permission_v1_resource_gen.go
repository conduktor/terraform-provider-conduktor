// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_console_application_instance_permission_v1

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/validation"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ConsoleApplicationInstancePermissionV1ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"app_instance": schema.StringAttribute{
				Required:            true,
				Description:         "Reference to the application instance this permission belongs to",
				MarkdownDescription: "Reference to the application instance this permission belongs to",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
				},
			},
			"application": schema.StringAttribute{
				Required:            true,
				Description:         "Reference to the application this permission belongs to",
				MarkdownDescription: "Reference to the application this permission belongs to",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Application Instance Permission name, must be unique, acts as an ID for import",
				MarkdownDescription: "Application Instance Permission name, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
				},
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"granted_to": schema.StringAttribute{
						Required:            true,
						Description:         "Reference to an application instance. Must be on the same Kafka cluster as app_instance",
						MarkdownDescription: "Reference to an application instance. Must be on the same Kafka cluster as app_instance",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
						},
					},
					"resource": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"connect_cluster": schema.StringAttribute{
								Optional:            true,
								Description:         "Valid Kafka Connect Cluster refrence",
								MarkdownDescription: "Valid Kafka Connect Cluster refrence",
							},
							"name": schema.StringAttribute{
								Required:            true,
								Description:         "Name of the resource. Must reference any sub-resource of app_instance",
								MarkdownDescription: "Name of the resource. Must reference any sub-resource of app_instance",
							},
							"pattern_type": schema.StringAttribute{
								Required:            true,
								Description:         "Pattern type for the resource, valid values are: LITERAL, PREFIXED",
								MarkdownDescription: "Pattern type for the resource, valid values are: LITERAL, PREFIXED",
								Validators: []validator.String{
									stringvalidator.OneOf(validation.ValidPatternTypes...),
								},
							},
							"type": schema.StringAttribute{
								Required:            true,
								Description:         "Type of the resource, valid values are: TOPIC, CONSUMER_GROUP, SUBJECT, CONNECTOR",
								MarkdownDescription: "Type of the resource, valid values are: TOPIC, CONSUMER_GROUP, SUBJECT, CONNECTOR",
								Validators: []validator.String{
									stringvalidator.OneOf(validation.ValidResourceTypes...),
								},
							},
						},
						CustomType: ResourceType{
							ObjectType: types.ObjectType{
								AttrTypes: ResourceValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "Resources associated with this application instance permission",
						MarkdownDescription: "Resources associated with this application instance permission",
					},
					"service_account_permission": schema.StringAttribute{
						Required:            true,
						Description:         "Permission applied to the service account, valid values are: NONE, READ, WRITE",
						MarkdownDescription: "Permission applied to the service account, valid values are: NONE, READ, WRITE",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidApplicationInstancePermission...),
						},
					},
					"user_permission": schema.StringAttribute{
						Required:            true,
						Description:         "Permission applied to the user, valid values are: NONE, READ, WRITE",
						MarkdownDescription: "Permission applied to the user, valid values are: NONE, READ, WRITE",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidApplicationInstancePermission...),
						},
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Application Instance specification. It's immutable (update will require the resource to be recreated)",
				MarkdownDescription: "Application Instance specification. It's immutable (update will require the resource to be recreated)",
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

type ConsoleApplicationInstancePermissionV1Model struct {
	AppInstance types.String `tfsdk:"app_instance"`
	Application types.String `tfsdk:"application"`
	Name        types.String `tfsdk:"name"`
	Spec        SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	grantedToAttribute, ok := attributes["granted_to"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`granted_to is missing from object`)

		return nil, diags
	}

	grantedToVal, ok := grantedToAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`granted_to expected to be basetypes.StringValue, was: %T`, grantedToAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return nil, diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.ObjectValue, was: %T`, resourceAttribute))
	}

	serviceAccountPermissionAttribute, ok := attributes["service_account_permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account_permission is missing from object`)

		return nil, diags
	}

	serviceAccountPermissionVal, ok := serviceAccountPermissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account_permission expected to be basetypes.StringValue, was: %T`, serviceAccountPermissionAttribute))
	}

	userPermissionAttribute, ok := attributes["user_permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_permission is missing from object`)

		return nil, diags
	}

	userPermissionVal, ok := userPermissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_permission expected to be basetypes.StringValue, was: %T`, userPermissionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		GrantedTo:                grantedToVal,
		Resource:                 resourceVal,
		ServiceAccountPermission: serviceAccountPermissionVal,
		UserPermission:           userPermissionVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	grantedToAttribute, ok := attributes["granted_to"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`granted_to is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	grantedToVal, ok := grantedToAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`granted_to expected to be basetypes.StringValue, was: %T`, grantedToAttribute))
	}

	resourceAttribute, ok := attributes["resource"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	resourceVal, ok := resourceAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource expected to be basetypes.ObjectValue, was: %T`, resourceAttribute))
	}

	serviceAccountPermissionAttribute, ok := attributes["service_account_permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account_permission is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	serviceAccountPermissionVal, ok := serviceAccountPermissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account_permission expected to be basetypes.StringValue, was: %T`, serviceAccountPermissionAttribute))
	}

	userPermissionAttribute, ok := attributes["user_permission"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_permission is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	userPermissionVal, ok := userPermissionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_permission expected to be basetypes.StringValue, was: %T`, userPermissionAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		GrantedTo:                grantedToVal,
		Resource:                 resourceVal,
		ServiceAccountPermission: serviceAccountPermissionVal,
		UserPermission:           userPermissionVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	GrantedTo                basetypes.StringValue `tfsdk:"granted_to"`
	Resource                 basetypes.ObjectValue `tfsdk:"resource"`
	ServiceAccountPermission basetypes.StringValue `tfsdk:"service_account_permission"`
	UserPermission           basetypes.StringValue `tfsdk:"user_permission"`
	state                    attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["granted_to"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resource"] = basetypes.ObjectType{
		AttrTypes: ResourceValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["service_account_permission"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["user_permission"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.GrantedTo.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["granted_to"] = val

		val, err = v.Resource.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource"] = val

		val, err = v.ServiceAccountPermission.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_account_permission"] = val

		val, err = v.UserPermission.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_permission"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var resourceVal basetypes.ObjectValue

	if v.Resource.IsNull() {
		resourceVal = types.ObjectNull(
			ResourceValue{}.AttributeTypes(ctx),
		)
	}

	if v.Resource.IsUnknown() {
		resourceVal = types.ObjectUnknown(
			ResourceValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Resource.IsNull() && !v.Resource.IsUnknown() {
		resourceVal = types.ObjectValueMust(
			ResourceValue{}.AttributeTypes(ctx),
			v.Resource.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"granted_to": basetypes.StringType{},
		"resource": basetypes.ObjectType{
			AttrTypes: ResourceValue{}.AttributeTypes(ctx),
		},
		"service_account_permission": basetypes.StringType{},
		"user_permission":            basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"granted_to":                 v.GrantedTo,
			"resource":                   resourceVal,
			"service_account_permission": v.ServiceAccountPermission,
			"user_permission":            v.UserPermission,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.GrantedTo.Equal(other.GrantedTo) {
		return false
	}

	if !v.Resource.Equal(other.Resource) {
		return false
	}

	if !v.ServiceAccountPermission.Equal(other.ServiceAccountPermission) {
		return false
	}

	if !v.UserPermission.Equal(other.UserPermission) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"granted_to": basetypes.StringType{},
		"resource": basetypes.ObjectType{
			AttrTypes: ResourceValue{}.AttributeTypes(ctx),
		},
		"service_account_permission": basetypes.StringType{},
		"user_permission":            basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ResourceType{}

type ResourceType struct {
	basetypes.ObjectType
}

func (t ResourceType) Equal(o attr.Type) bool {
	other, ok := o.(ResourceType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResourceType) String() string {
	return "ResourceType"
}

func (t ResourceType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	connectClusterAttribute, ok := attributes["connect_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connect_cluster is missing from object`)

		return nil, diags
	}

	connectClusterVal, ok := connectClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connect_cluster expected to be basetypes.StringValue, was: %T`, connectClusterAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return nil, diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResourceValue{
		ConnectCluster: connectClusterVal,
		Name:           nameVal,
		PatternType:    patternTypeVal,
		ResourceType:   typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewResourceValueNull() ResourceValue {
	return ResourceValue{
		state: attr.ValueStateNull,
	}
}

func NewResourceValueUnknown() ResourceValue {
	return ResourceValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResourceValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResourceValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResourceValue Attribute Value",
				"While creating a ResourceValue value, a missing attribute value was detected. "+
					"A ResourceValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourceValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResourceValue Attribute Type",
				"While creating a ResourceValue value, an invalid attribute value was detected. "+
					"A ResourceValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourceValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResourceValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResourceValue Attribute Value",
				"While creating a ResourceValue value, an extra attribute value was detected. "+
					"A ResourceValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResourceValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResourceValueUnknown(), diags
	}

	connectClusterAttribute, ok := attributes["connect_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connect_cluster is missing from object`)

		return NewResourceValueUnknown(), diags
	}

	connectClusterVal, ok := connectClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connect_cluster expected to be basetypes.StringValue, was: %T`, connectClusterAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewResourceValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return NewResourceValueUnknown(), diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewResourceValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewResourceValueUnknown(), diags
	}

	return ResourceValue{
		ConnectCluster: connectClusterVal,
		Name:           nameVal,
		PatternType:    patternTypeVal,
		ResourceType:   typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewResourceValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResourceValue {
	object, diags := NewResourceValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResourceValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResourceType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResourceValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResourceValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourceValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResourceValueMust(ResourceValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResourceType) ValueType(ctx context.Context) attr.Value {
	return ResourceValue{}
}

var _ basetypes.ObjectValuable = ResourceValue{}

type ResourceValue struct {
	ConnectCluster basetypes.StringValue `tfsdk:"connect_cluster"`
	Name           basetypes.StringValue `tfsdk:"name"`
	PatternType    basetypes.StringValue `tfsdk:"pattern_type"`
	ResourceType   basetypes.StringValue `tfsdk:"type"`
	state          attr.ValueState
}

func (v ResourceValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["connect_cluster"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["pattern_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.ConnectCluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connect_cluster"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PatternType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pattern_type"] = val

		val, err = v.ResourceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResourceValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResourceValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResourceValue) String() string {
	return "ResourceValue"
}

func (v ResourceValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"connect_cluster": basetypes.StringType{},
		"name":            basetypes.StringType{},
		"pattern_type":    basetypes.StringType{},
		"type":            basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"connect_cluster": v.ConnectCluster,
			"name":            v.Name,
			"pattern_type":    v.PatternType,
			"type":            v.ResourceType,
		})

	return objVal, diags
}

func (v ResourceValue) Equal(o attr.Value) bool {
	other, ok := o.(ResourceValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ConnectCluster.Equal(other.ConnectCluster) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PatternType.Equal(other.PatternType) {
		return false
	}

	if !v.ResourceType.Equal(other.ResourceType) {
		return false
	}

	return true
}

func (v ResourceValue) Type(ctx context.Context) attr.Type {
	return ResourceType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResourceValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"connect_cluster": basetypes.StringType{},
		"name":            basetypes.StringType{},
		"pattern_type":    basetypes.StringType{},
		"type":            basetypes.StringType{},
	}
}
