// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_gateway_interceptor_v2

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/default"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GatewayInterceptorV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the interceptor, must be unique, acts as an ID for import",
				MarkdownDescription: "The name of the interceptor, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]{3,64}$"), ""),
				},
			},
			"scope": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"group": schema.StringAttribute{
						Optional:            true,
						Description:         "The name of the group the interceptor will be applied to. Optional parameter for defining the scope",
						MarkdownDescription: "The name of the group the interceptor will be applied to. Optional parameter for defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
						},
					},
					"username": schema.StringAttribute{
						Optional:            true,
						Description:         "The username the interceptor will be applied to. Optional parameter for defining the scope",
						MarkdownDescription: "The username the interceptor will be applied to. Optional parameter for defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
						},
					},
					"vcluster": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The name of the virtual cluster the interceptor will be applied to. Optional parameter for defining the scope",
						MarkdownDescription: "The name of the virtual cluster the interceptor will be applied to. Optional parameter for defining the scope",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
						},
						Default: stringdefault.StaticString("passthrough"),
					},
				},
				CustomType: ScopeType{
					ObjectType: types.ObjectType{
						AttrTypes: ScopeValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The targeting scope of the interceptor. See [documentation](https://docs.conduktor.io/gateway/reference/resources-reference/#interceptor-targeting)",
				MarkdownDescription: "The targeting scope of the interceptor. See [documentation](https://docs.conduktor.io/gateway/reference/resources-reference/#interceptor-targeting)",
				Default:             objectdefault.StaticValue(_default.DefaultScope),
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"comment": schema.StringAttribute{
						Optional:            true,
						Description:         "An optional comment for the interceptor.",
						MarkdownDescription: "An optional comment for the interceptor.",
					},
					"config": schema.StringAttribute{
						CustomType:          jsontypes.NormalizedType{},
						Required:            true,
						Description:         "Plugin configuration in JSON format. Check the [interceptor catalog](https://docs.conduktor.io/gateway/category/interceptor-catalog/) for details on the configuration",
						MarkdownDescription: "Plugin configuration in JSON format. Check the [interceptor catalog](https://docs.conduktor.io/gateway/category/interceptor-catalog/) for details on the configuration",
					},
					"plugin_class": schema.StringAttribute{
						Required:            true,
						Description:         "The class of the plugin. Check the [interceptor catalog](https://docs.conduktor.io/gateway/category/interceptor-catalog/) for available plugins",
						MarkdownDescription: "The class of the plugin. Check the [interceptor catalog](https://docs.conduktor.io/gateway/category/interceptor-catalog/) for available plugins",
					},
					"priority": schema.Int64Attribute{
						Required:            true,
						Description:         "The priority of the interceptor. Must be greater than 0",
						MarkdownDescription: "The priority of the interceptor. Must be greater than 0",
						Validators: []validator.Int64{
							int64validator.Between(1, 2147483647),
						},
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "The interceptor specification",
				MarkdownDescription: "The interceptor specification",
			},
		},
	}
}

type GatewayInterceptorV2Model struct {
	Name  types.String `tfsdk:"name"`
	Scope ScopeValue   `tfsdk:"scope"`
	Spec  SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = ScopeType{}

type ScopeType struct {
	basetypes.ObjectType
}

func (t ScopeType) Equal(o attr.Type) bool {
	other, ok := o.(ScopeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ScopeType) String() string {
	return "ScopeType"
}

func (t ScopeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	vclusterAttribute, ok := attributes["vcluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcluster is missing from object`)

		return nil, diags
	}

	vclusterVal, ok := vclusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcluster expected to be basetypes.StringValue, was: %T`, vclusterAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ScopeValue{
		Group:    groupVal,
		Username: usernameVal,
		Vcluster: vclusterVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewScopeValueNull() ScopeValue {
	return ScopeValue{
		state: attr.ValueStateNull,
	}
}

func NewScopeValueUnknown() ScopeValue {
	return ScopeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewScopeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ScopeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ScopeValue Attribute Value",
				"While creating a ScopeValue value, a missing attribute value was detected. "+
					"A ScopeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ScopeValue Attribute Type",
				"While creating a ScopeValue value, an invalid attribute value was detected. "+
					"A ScopeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ScopeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ScopeValue Attribute Value",
				"While creating a ScopeValue value, an extra attribute value was detected. "+
					"A ScopeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ScopeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewScopeValueUnknown(), diags
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	vclusterAttribute, ok := attributes["vcluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcluster is missing from object`)

		return NewScopeValueUnknown(), diags
	}

	vclusterVal, ok := vclusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcluster expected to be basetypes.StringValue, was: %T`, vclusterAttribute))
	}

	if diags.HasError() {
		return NewScopeValueUnknown(), diags
	}

	return ScopeValue{
		Group:    groupVal,
		Username: usernameVal,
		Vcluster: vclusterVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewScopeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ScopeValue {
	object, diags := NewScopeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewScopeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ScopeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewScopeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewScopeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewScopeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewScopeValueMust(ScopeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ScopeType) ValueType(ctx context.Context) attr.Value {
	return ScopeValue{}
}

var _ basetypes.ObjectValuable = ScopeValue{}

type ScopeValue struct {
	Group    basetypes.StringValue `tfsdk:"group"`
	Username basetypes.StringValue `tfsdk:"username"`
	Vcluster basetypes.StringValue `tfsdk:"vcluster"`
	state    attr.ValueState
}

func (v ScopeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vcluster"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		val, err = v.Vcluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcluster"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ScopeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ScopeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ScopeValue) String() string {
	return "ScopeValue"
}

func (v ScopeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"group":    basetypes.StringType{},
		"username": basetypes.StringType{},
		"vcluster": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"group":    v.Group,
			"username": v.Username,
			"vcluster": v.Vcluster,
		})

	return objVal, diags
}

func (v ScopeValue) Equal(o attr.Value) bool {
	other, ok := o.(ScopeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	if !v.Vcluster.Equal(other.Vcluster) {
		return false
	}

	return true
}

func (v ScopeValue) Type(ctx context.Context) attr.Type {
	return ScopeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ScopeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"group":    basetypes.StringType{},
		"username": basetypes.StringType{},
		"vcluster": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return nil, diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return nil, diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	pluginClassAttribute, ok := attributes["plugin_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plugin_class is missing from object`)

		return nil, diags
	}

	pluginClassVal, ok := pluginClassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plugin_class expected to be basetypes.StringValue, was: %T`, pluginClassAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return nil, diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.Int64Value, was: %T`, priorityAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Comment:     commentVal,
		Config:      configVal,
		PluginClass: pluginClassVal,
		Priority:    priorityVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	commentAttribute, ok := attributes["comment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`comment is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	commentVal, ok := commentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`comment expected to be basetypes.StringValue, was: %T`, commentAttribute))
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	pluginClassAttribute, ok := attributes["plugin_class"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`plugin_class is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	pluginClassVal, ok := pluginClassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`plugin_class expected to be basetypes.StringValue, was: %T`, pluginClassAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.Int64Value, was: %T`, priorityAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Comment:     commentVal,
		Config:      configVal,
		PluginClass: pluginClassVal,
		Priority:    priorityVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Comment     basetypes.StringValue `tfsdk:"comment"`
	Config      basetypes.StringValue `tfsdk:"config"`
	PluginClass basetypes.StringValue `tfsdk:"plugin_class"`
	Priority    basetypes.Int64Value  `tfsdk:"priority"`
	state       attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["comment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["plugin_class"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["priority"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Comment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["comment"] = val

		val, err = v.Config.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config"] = val

		val, err = v.PluginClass.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["plugin_class"] = val

		val, err = v.Priority.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["priority"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"comment":      basetypes.StringType{},
		"config":       basetypes.StringType{},
		"plugin_class": basetypes.StringType{},
		"priority":     basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"comment":      v.Comment,
			"config":       v.Config,
			"plugin_class": v.PluginClass,
			"priority":     v.Priority,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Comment.Equal(other.Comment) {
		return false
	}

	if !v.Config.Equal(other.Config) {
		return false
	}

	if !v.PluginClass.Equal(other.PluginClass) {
		return false
	}

	if !v.Priority.Equal(other.Priority) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"comment":      basetypes.StringType{},
		"config":       basetypes.StringType{},
		"plugin_class": basetypes.StringType{},
		"priority":     basetypes.Int64Type{},
	}
}
