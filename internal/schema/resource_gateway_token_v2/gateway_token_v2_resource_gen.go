// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_gateway_token_v2

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GatewayTokenV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"lifetime_seconds": schema.Int64Attribute{
				Required:            true,
				Description:         "The life time of the token in milliseconds.",
				MarkdownDescription: "The life time of the token in milliseconds.",
				Validators: []validator.Int64{
					int64validator.Between(1, 2147483647),
				},
			},
			"username": schema.StringAttribute{
				Required:            true,
				Description:         "The username of the local service account to create the token for.",
				MarkdownDescription: "The username of the local service account to create the token for.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"vcluster": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the virtual cluster to create the token for. If not provided, the token will be created in the default passthrough virtual cluster.",
				MarkdownDescription: "The name of the virtual cluster to create the token for. If not provided, the token will be created in the default passthrough virtual cluster.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
				},
				Default: stringdefault.StaticString("passthrough"),
			},
		},
	}
}

type GatewayTokenV2Model struct {
	LifetimeSeconds types.Int64  `tfsdk:"lifetime_seconds"`
	Username        types.String `tfsdk:"username"`
	Vcluster        types.String `tfsdk:"vcluster"`
}
