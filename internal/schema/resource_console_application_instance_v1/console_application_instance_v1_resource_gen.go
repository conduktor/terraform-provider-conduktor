// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_console_application_instance_v1

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/validation"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ConsoleApplicationInstanceV1ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"application": schema.StringAttribute{
				Required:            true,
				Description:         "Reference to the application this instance belongs to",
				MarkdownDescription: "Reference to the application this instance belongs to",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Application Instance name, must be unique, acts as an ID for import",
				MarkdownDescription: "Application Instance name, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-z\\_\\-]+$"), ""),
				},
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"application_managed_service_account": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "If set to true, the service account ACLs will be managed by the Application owners directly instead of being synchronized by the ApplicationInstance component. See [documentation](https://docs.conduktor.io/platform/reference/resource-reference/self-service/#application-managed-service-account) for more information",
						MarkdownDescription: "If set to true, the service account ACLs will be managed by the Application owners directly instead of being synchronized by the ApplicationInstance component. See [documentation](https://docs.conduktor.io/platform/reference/resource-reference/self-service/#application-managed-service-account) for more information",
					},
					"cluster": schema.StringAttribute{
						Required:            true,
						Description:         "Valid Console Cluster. It's immutable (update will require the resource to be recreated)",
						MarkdownDescription: "Valid Console Cluster. It's immutable (update will require the resource to be recreated)",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"default_catalog_visibility": schema.StringAttribute{
						Optional:            true,
						Description:         "Default catalog visibility for the application instance, valid values are: PRIVATE, PUBLIC",
						MarkdownDescription: "Default catalog visibility for the application instance, valid values are: PRIVATE, PUBLIC",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidCatalogVisibilities...),
						},
					},
					"resources": schema.SetNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connect_cluster": schema.StringAttribute{
									Optional:            true,
									Description:         "Valid Connect Cluster linked to the Kafka Cluster `spec.cluster`. Only mandatory when type is CONNECTOR",
									MarkdownDescription: "Valid Connect Cluster linked to the Kafka Cluster `spec.cluster`. Only mandatory when type is CONNECTOR",
								},
								"name": schema.StringAttribute{
									Required:            true,
									Description:         "Name of the resource",
									MarkdownDescription: "Name of the resource",
								},
								"ownership_mode": schema.StringAttribute{
									Optional:            true,
									Description:         "Ownership mode for the resource",
									MarkdownDescription: "Ownership mode for the resource",
									Validators: []validator.String{
										stringvalidator.OneOf(validation.ValidOwnershipModes...),
									},
								},
								"pattern_type": schema.StringAttribute{
									Required:            true,
									Description:         "Pattern type for the resource, valid values are: LITERAL, PREFIXED",
									MarkdownDescription: "Pattern type for the resource, valid values are: LITERAL, PREFIXED",
									Validators: []validator.String{
										stringvalidator.OneOf(validation.ValidPatternTypes...),
									},
								},
								"type": schema.StringAttribute{
									Required:            true,
									Description:         "Type of the resource, valid values are: TOPIC, CONSUMER_GROUP, SUBJECT, CONNECTOR",
									MarkdownDescription: "Type of the resource, valid values are: TOPIC, CONSUMER_GROUP, SUBJECT, CONNECTOR",
									Validators: []validator.String{
										stringvalidator.OneOf(validation.ValidResourceTypes...),
									},
								},
							},
							CustomType: ResourcesType{
								ObjectType: types.ObjectType{
									AttrTypes: ResourcesValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "Set of all resources associated with this application instance",
						MarkdownDescription: "Set of all resources associated with this application instance",
					},
					"service_account": schema.StringAttribute{
						Optional:            true,
						Description:         "Service account associated with this application instance",
						MarkdownDescription: "Service account associated with this application instance",
					},
					"topic_policy_ref": schema.SetAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Reference to the topic policy to apply to this instance",
						MarkdownDescription: "Reference to the topic policy to apply to this instance",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Application Instance specification",
				MarkdownDescription: "Application Instance specification",
			},
		},
	}
}

type ConsoleApplicationInstanceV1Model struct {
	Application types.String `tfsdk:"application"`
	Name        types.String `tfsdk:"name"`
	Spec        SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	applicationManagedServiceAccountAttribute, ok := attributes["application_managed_service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`application_managed_service_account is missing from object`)

		return nil, diags
	}

	applicationManagedServiceAccountVal, ok := applicationManagedServiceAccountAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`application_managed_service_account expected to be basetypes.BoolValue, was: %T`, applicationManagedServiceAccountAttribute))
	}

	clusterAttribute, ok := attributes["cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster is missing from object`)

		return nil, diags
	}

	clusterVal, ok := clusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster expected to be basetypes.StringValue, was: %T`, clusterAttribute))
	}

	defaultCatalogVisibilityAttribute, ok := attributes["default_catalog_visibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_catalog_visibility is missing from object`)

		return nil, diags
	}

	defaultCatalogVisibilityVal, ok := defaultCatalogVisibilityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_catalog_visibility expected to be basetypes.StringValue, was: %T`, defaultCatalogVisibilityAttribute))
	}

	resourcesAttribute, ok := attributes["resources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resources is missing from object`)

		return nil, diags
	}

	resourcesVal, ok := resourcesAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resources expected to be basetypes.SetValue, was: %T`, resourcesAttribute))
	}

	serviceAccountAttribute, ok := attributes["service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account is missing from object`)

		return nil, diags
	}

	serviceAccountVal, ok := serviceAccountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account expected to be basetypes.StringValue, was: %T`, serviceAccountAttribute))
	}

	topicPolicyRefAttribute, ok := attributes["topic_policy_ref"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic_policy_ref is missing from object`)

		return nil, diags
	}

	topicPolicyRefVal, ok := topicPolicyRefAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic_policy_ref expected to be basetypes.SetValue, was: %T`, topicPolicyRefAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		ApplicationManagedServiceAccount: applicationManagedServiceAccountVal,
		Cluster:                          clusterVal,
		DefaultCatalogVisibility:         defaultCatalogVisibilityVal,
		Resources:                        resourcesVal,
		ServiceAccount:                   serviceAccountVal,
		TopicPolicyRef:                   topicPolicyRefVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	applicationManagedServiceAccountAttribute, ok := attributes["application_managed_service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`application_managed_service_account is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	applicationManagedServiceAccountVal, ok := applicationManagedServiceAccountAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`application_managed_service_account expected to be basetypes.BoolValue, was: %T`, applicationManagedServiceAccountAttribute))
	}

	clusterAttribute, ok := attributes["cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	clusterVal, ok := clusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster expected to be basetypes.StringValue, was: %T`, clusterAttribute))
	}

	defaultCatalogVisibilityAttribute, ok := attributes["default_catalog_visibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`default_catalog_visibility is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	defaultCatalogVisibilityVal, ok := defaultCatalogVisibilityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`default_catalog_visibility expected to be basetypes.StringValue, was: %T`, defaultCatalogVisibilityAttribute))
	}

	resourcesAttribute, ok := attributes["resources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resources is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	resourcesVal, ok := resourcesAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resources expected to be basetypes.SetValue, was: %T`, resourcesAttribute))
	}

	serviceAccountAttribute, ok := attributes["service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	serviceAccountVal, ok := serviceAccountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account expected to be basetypes.StringValue, was: %T`, serviceAccountAttribute))
	}

	topicPolicyRefAttribute, ok := attributes["topic_policy_ref"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic_policy_ref is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	topicPolicyRefVal, ok := topicPolicyRefAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic_policy_ref expected to be basetypes.SetValue, was: %T`, topicPolicyRefAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		ApplicationManagedServiceAccount: applicationManagedServiceAccountVal,
		Cluster:                          clusterVal,
		DefaultCatalogVisibility:         defaultCatalogVisibilityVal,
		Resources:                        resourcesVal,
		ServiceAccount:                   serviceAccountVal,
		TopicPolicyRef:                   topicPolicyRefVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	ApplicationManagedServiceAccount basetypes.BoolValue   `tfsdk:"application_managed_service_account"`
	Cluster                          basetypes.StringValue `tfsdk:"cluster"`
	DefaultCatalogVisibility         basetypes.StringValue `tfsdk:"default_catalog_visibility"`
	Resources                        basetypes.SetValue    `tfsdk:"resources"`
	ServiceAccount                   basetypes.StringValue `tfsdk:"service_account"`
	TopicPolicyRef                   basetypes.SetValue    `tfsdk:"topic_policy_ref"`
	state                            attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["application_managed_service_account"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["cluster"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["default_catalog_visibility"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resources"] = basetypes.SetType{
		ElemType: ResourcesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["service_account"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["topic_policy_ref"] = basetypes.SetType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.ApplicationManagedServiceAccount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["application_managed_service_account"] = val

		val, err = v.Cluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cluster"] = val

		val, err = v.DefaultCatalogVisibility.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["default_catalog_visibility"] = val

		val, err = v.Resources.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resources"] = val

		val, err = v.ServiceAccount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_account"] = val

		val, err = v.TopicPolicyRef.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["topic_policy_ref"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	resources := types.SetValueMust(
		ResourcesType{
			basetypes.ObjectType{
				AttrTypes: ResourcesValue{}.AttributeTypes(ctx),
			},
		},
		v.Resources.Elements(),
	)

	if v.Resources.IsNull() {
		resources = types.SetNull(
			ResourcesType{
				basetypes.ObjectType{
					AttrTypes: ResourcesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Resources.IsUnknown() {
		resources = types.SetUnknown(
			ResourcesType{
				basetypes.ObjectType{
					AttrTypes: ResourcesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var topicPolicyRefVal basetypes.SetValue
	switch {
	case v.TopicPolicyRef.IsUnknown():
		topicPolicyRefVal = types.SetUnknown(types.StringType)
	case v.TopicPolicyRef.IsNull():
		topicPolicyRefVal = types.SetNull(types.StringType)
	default:
		var d diag.Diagnostics
		topicPolicyRefVal, d = types.SetValue(types.StringType, v.TopicPolicyRef.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"application_managed_service_account": basetypes.BoolType{},
			"cluster":                             basetypes.StringType{},
			"default_catalog_visibility":          basetypes.StringType{},
			"resources": basetypes.SetType{
				ElemType: ResourcesValue{}.Type(ctx),
			},
			"service_account": basetypes.StringType{},
			"topic_policy_ref": basetypes.SetType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"application_managed_service_account": basetypes.BoolType{},
		"cluster":                             basetypes.StringType{},
		"default_catalog_visibility":          basetypes.StringType{},
		"resources": basetypes.SetType{
			ElemType: ResourcesValue{}.Type(ctx),
		},
		"service_account": basetypes.StringType{},
		"topic_policy_ref": basetypes.SetType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"application_managed_service_account": v.ApplicationManagedServiceAccount,
			"cluster":                             v.Cluster,
			"default_catalog_visibility":          v.DefaultCatalogVisibility,
			"resources":                           resources,
			"service_account":                     v.ServiceAccount,
			"topic_policy_ref":                    topicPolicyRefVal,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApplicationManagedServiceAccount.Equal(other.ApplicationManagedServiceAccount) {
		return false
	}

	if !v.Cluster.Equal(other.Cluster) {
		return false
	}

	if !v.DefaultCatalogVisibility.Equal(other.DefaultCatalogVisibility) {
		return false
	}

	if !v.Resources.Equal(other.Resources) {
		return false
	}

	if !v.ServiceAccount.Equal(other.ServiceAccount) {
		return false
	}

	if !v.TopicPolicyRef.Equal(other.TopicPolicyRef) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"application_managed_service_account": basetypes.BoolType{},
		"cluster":                             basetypes.StringType{},
		"default_catalog_visibility":          basetypes.StringType{},
		"resources": basetypes.SetType{
			ElemType: ResourcesValue{}.Type(ctx),
		},
		"service_account": basetypes.StringType{},
		"topic_policy_ref": basetypes.SetType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = ResourcesType{}

type ResourcesType struct {
	basetypes.ObjectType
}

func (t ResourcesType) Equal(o attr.Type) bool {
	other, ok := o.(ResourcesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ResourcesType) String() string {
	return "ResourcesType"
}

func (t ResourcesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	connectClusterAttribute, ok := attributes["connect_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connect_cluster is missing from object`)

		return nil, diags
	}

	connectClusterVal, ok := connectClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connect_cluster expected to be basetypes.StringValue, was: %T`, connectClusterAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownershipModeAttribute, ok := attributes["ownership_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ownership_mode is missing from object`)

		return nil, diags
	}

	ownershipModeVal, ok := ownershipModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ownership_mode expected to be basetypes.StringValue, was: %T`, ownershipModeAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return nil, diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ResourcesValue{
		ConnectCluster: connectClusterVal,
		Name:           nameVal,
		OwnershipMode:  ownershipModeVal,
		PatternType:    patternTypeVal,
		ResourcesType:  typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewResourcesValueNull() ResourcesValue {
	return ResourcesValue{
		state: attr.ValueStateNull,
	}
}

func NewResourcesValueUnknown() ResourcesValue {
	return ResourcesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewResourcesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ResourcesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ResourcesValue Attribute Value",
				"While creating a ResourcesValue value, a missing attribute value was detected. "+
					"A ResourcesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ResourcesValue Attribute Type",
				"While creating a ResourcesValue value, an invalid attribute value was detected. "+
					"A ResourcesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ResourcesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ResourcesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ResourcesValue Attribute Value",
				"While creating a ResourcesValue value, an extra attribute value was detected. "+
					"A ResourcesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ResourcesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewResourcesValueUnknown(), diags
	}

	connectClusterAttribute, ok := attributes["connect_cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connect_cluster is missing from object`)

		return NewResourcesValueUnknown(), diags
	}

	connectClusterVal, ok := connectClusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connect_cluster expected to be basetypes.StringValue, was: %T`, connectClusterAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewResourcesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	ownershipModeAttribute, ok := attributes["ownership_mode"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ownership_mode is missing from object`)

		return NewResourcesValueUnknown(), diags
	}

	ownershipModeVal, ok := ownershipModeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ownership_mode expected to be basetypes.StringValue, was: %T`, ownershipModeAttribute))
	}

	patternTypeAttribute, ok := attributes["pattern_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pattern_type is missing from object`)

		return NewResourcesValueUnknown(), diags
	}

	patternTypeVal, ok := patternTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pattern_type expected to be basetypes.StringValue, was: %T`, patternTypeAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewResourcesValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewResourcesValueUnknown(), diags
	}

	return ResourcesValue{
		ConnectCluster: connectClusterVal,
		Name:           nameVal,
		OwnershipMode:  ownershipModeVal,
		PatternType:    patternTypeVal,
		ResourcesType:  typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewResourcesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ResourcesValue {
	object, diags := NewResourcesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewResourcesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ResourcesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewResourcesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewResourcesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewResourcesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewResourcesValueMust(ResourcesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ResourcesType) ValueType(ctx context.Context) attr.Value {
	return ResourcesValue{}
}

var _ basetypes.ObjectValuable = ResourcesValue{}

type ResourcesValue struct {
	ConnectCluster basetypes.StringValue `tfsdk:"connect_cluster"`
	Name           basetypes.StringValue `tfsdk:"name"`
	OwnershipMode  basetypes.StringValue `tfsdk:"ownership_mode"`
	PatternType    basetypes.StringValue `tfsdk:"pattern_type"`
	ResourcesType  basetypes.StringValue `tfsdk:"type"`
	state          attr.ValueState
}

func (v ResourcesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["connect_cluster"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ownership_mode"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["pattern_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ConnectCluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connect_cluster"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OwnershipMode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ownership_mode"] = val

		val, err = v.PatternType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pattern_type"] = val

		val, err = v.ResourcesType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ResourcesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ResourcesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ResourcesValue) String() string {
	return "ResourcesValue"
}

func (v ResourcesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"connect_cluster": basetypes.StringType{},
		"name":            basetypes.StringType{},
		"ownership_mode":  basetypes.StringType{},
		"pattern_type":    basetypes.StringType{},
		"type":            basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"connect_cluster": v.ConnectCluster,
			"name":            v.Name,
			"ownership_mode":  v.OwnershipMode,
			"pattern_type":    v.PatternType,
			"type":            v.ResourcesType,
		})

	return objVal, diags
}

func (v ResourcesValue) Equal(o attr.Value) bool {
	other, ok := o.(ResourcesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ConnectCluster.Equal(other.ConnectCluster) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OwnershipMode.Equal(other.OwnershipMode) {
		return false
	}

	if !v.PatternType.Equal(other.PatternType) {
		return false
	}

	if !v.ResourcesType.Equal(other.ResourcesType) {
		return false
	}

	return true
}

func (v ResourcesValue) Type(ctx context.Context) attr.Type {
	return ResourcesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ResourcesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"connect_cluster": basetypes.StringType{},
		"name":            basetypes.StringType{},
		"ownership_mode":  basetypes.StringType{},
		"pattern_type":    basetypes.StringType{},
		"type":            basetypes.StringType{},
	}
}
