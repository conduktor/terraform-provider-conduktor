// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_console_kafka_subject_v2

import (
	"context"
	"fmt"
	"github.com/conduktor/terraform-provider-conduktor/internal/schema/validation"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ConsoleKafkaSubjectV2ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cluster": schema.StringAttribute{
				Required:            true,
				Description:         "Kafka cluster name linked with Kafka subject. Must already exist in Conduktor Console. Any change will require the Subject to be destroyed and re-created",
				MarkdownDescription: "Kafka cluster name linked with Kafka subject. Must already exist in Conduktor Console. Any change will require the Subject to be destroyed and re-created",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Kafka connect server labels",
				MarkdownDescription: "Kafka connect server labels",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Kafka subject name, must be unique, acts as an ID for import",
				MarkdownDescription: "Kafka subject name, must be unique, acts as an ID for import",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"compatibility": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Kafka subject compatibility (BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE, NONE)",
						MarkdownDescription: "Kafka subject compatibility (BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE, NONE)",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidKafkaSubjectCompatibility...),
						},
					},
					"format": schema.StringAttribute{
						Required:            true,
						Description:         "Kafka subject format (AVRO, JSON, PROTOBUF)",
						MarkdownDescription: "Kafka subject format (AVRO, JSON, PROTOBUF)",
						Validators: []validator.String{
							stringvalidator.OneOf(validation.ValidKafkaSubjectFormat...),
						},
					},
					"id": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "Kafka subject ID",
						MarkdownDescription: "Kafka subject ID",
					},
					"references": schema.SetNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Required:            true,
									Description:         "name required string",
									MarkdownDescription: "name required string",
								},
								"subject": schema.StringAttribute{
									Required:            true,
									Description:         "subject required string",
									MarkdownDescription: "subject required string",
								},
								"version": schema.Int64Attribute{
									Required:            true,
									Description:         "version required integer",
									MarkdownDescription: "version required integer",
								},
							},
							CustomType: ReferencesType{
								ObjectType: types.ObjectType{
									AttrTypes: ReferencesValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "Array of objects (SchemaReference)",
						MarkdownDescription: "Array of objects (SchemaReference)",
					},
					"schema": schema.StringAttribute{
						Required:            true,
						Description:         "Kafka subject schema",
						MarkdownDescription: "Kafka subject schema",
					},
					"version": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "Kafka subject version",
						MarkdownDescription: "Kafka subject version",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Kafka subject spec",
				MarkdownDescription: "Kafka subject spec",
			},
		},
	}
}

type ConsoleKafkaSubjectV2Model struct {
	Cluster types.String `tfsdk:"cluster"`
	Labels  types.Map    `tfsdk:"labels"`
	Name    types.String `tfsdk:"name"`
	Spec    SpecValue    `tfsdk:"spec"`
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	compatibilityAttribute, ok := attributes["compatibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`compatibility is missing from object`)

		return nil, diags
	}

	compatibilityVal, ok := compatibilityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`compatibility expected to be basetypes.StringValue, was: %T`, compatibilityAttribute))
	}

	formatAttribute, ok := attributes["format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`format is missing from object`)

		return nil, diags
	}

	formatVal, ok := formatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`format expected to be basetypes.StringValue, was: %T`, formatAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	referencesAttribute, ok := attributes["references"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`references is missing from object`)

		return nil, diags
	}

	referencesVal, ok := referencesAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`references expected to be basetypes.SetValue, was: %T`, referencesAttribute))
	}

	schemaAttribute, ok := attributes["schema"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema is missing from object`)

		return nil, diags
	}

	schemaVal, ok := schemaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema expected to be basetypes.StringValue, was: %T`, schemaAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Compatibility: compatibilityVal,
		Format:        formatVal,
		Id:            idVal,
		References:    referencesVal,
		Schema:        schemaVal,
		Version:       versionVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	compatibilityAttribute, ok := attributes["compatibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`compatibility is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	compatibilityVal, ok := compatibilityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`compatibility expected to be basetypes.StringValue, was: %T`, compatibilityAttribute))
	}

	formatAttribute, ok := attributes["format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`format is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	formatVal, ok := formatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`format expected to be basetypes.StringValue, was: %T`, formatAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	referencesAttribute, ok := attributes["references"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`references is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	referencesVal, ok := referencesAttribute.(basetypes.SetValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`references expected to be basetypes.SetValue, was: %T`, referencesAttribute))
	}

	schemaAttribute, ok := attributes["schema"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`schema is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	schemaVal, ok := schemaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`schema expected to be basetypes.StringValue, was: %T`, schemaAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Compatibility: compatibilityVal,
		Format:        formatVal,
		Id:            idVal,
		References:    referencesVal,
		Schema:        schemaVal,
		Version:       versionVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Compatibility basetypes.StringValue `tfsdk:"compatibility"`
	Format        basetypes.StringValue `tfsdk:"format"`
	Id            basetypes.Int64Value  `tfsdk:"id"`
	References    basetypes.SetValue    `tfsdk:"references"`
	Schema        basetypes.StringValue `tfsdk:"schema"`
	Version       basetypes.Int64Value  `tfsdk:"version"`
	state         attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["compatibility"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["references"] = basetypes.SetType{
		ElemType: ReferencesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["schema"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.Compatibility.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["compatibility"] = val

		val, err = v.Format.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["format"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.References.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["references"] = val

		val, err = v.Schema.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["schema"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	references := types.SetValueMust(
		ReferencesType{
			basetypes.ObjectType{
				AttrTypes: ReferencesValue{}.AttributeTypes(ctx),
			},
		},
		v.References.Elements(),
	)

	if v.References.IsNull() {
		references = types.SetNull(
			ReferencesType{
				basetypes.ObjectType{
					AttrTypes: ReferencesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.References.IsUnknown() {
		references = types.SetUnknown(
			ReferencesType{
				basetypes.ObjectType{
					AttrTypes: ReferencesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"compatibility": basetypes.StringType{},
		"format":        basetypes.StringType{},
		"id":            basetypes.Int64Type{},
		"references": basetypes.SetType{
			ElemType: ReferencesValue{}.Type(ctx),
		},
		"schema":  basetypes.StringType{},
		"version": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"compatibility": v.Compatibility,
			"format":        v.Format,
			"id":            v.Id,
			"references":    references,
			"schema":        v.Schema,
			"version":       v.Version,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Compatibility.Equal(other.Compatibility) {
		return false
	}

	if !v.Format.Equal(other.Format) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.References.Equal(other.References) {
		return false
	}

	if !v.Schema.Equal(other.Schema) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"compatibility": basetypes.StringType{},
		"format":        basetypes.StringType{},
		"id":            basetypes.Int64Type{},
		"references": basetypes.SetType{
			ElemType: ReferencesValue{}.Type(ctx),
		},
		"schema":  basetypes.StringType{},
		"version": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = ReferencesType{}

type ReferencesType struct {
	basetypes.ObjectType
}

func (t ReferencesType) Equal(o attr.Type) bool {
	other, ok := o.(ReferencesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ReferencesType) String() string {
	return "ReferencesType"
}

func (t ReferencesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	subjectAttribute, ok := attributes["subject"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subject is missing from object`)

		return nil, diags
	}

	subjectVal, ok := subjectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subject expected to be basetypes.StringValue, was: %T`, subjectAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ReferencesValue{
		Name:    nameVal,
		Subject: subjectVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewReferencesValueNull() ReferencesValue {
	return ReferencesValue{
		state: attr.ValueStateNull,
	}
}

func NewReferencesValueUnknown() ReferencesValue {
	return ReferencesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewReferencesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ReferencesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ReferencesValue Attribute Value",
				"While creating a ReferencesValue value, a missing attribute value was detected. "+
					"A ReferencesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReferencesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ReferencesValue Attribute Type",
				"While creating a ReferencesValue value, an invalid attribute value was detected. "+
					"A ReferencesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReferencesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ReferencesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ReferencesValue Attribute Value",
				"While creating a ReferencesValue value, an extra attribute value was detected. "+
					"A ReferencesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ReferencesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewReferencesValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewReferencesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	subjectAttribute, ok := attributes["subject"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`subject is missing from object`)

		return NewReferencesValueUnknown(), diags
	}

	subjectVal, ok := subjectAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`subject expected to be basetypes.StringValue, was: %T`, subjectAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewReferencesValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.Int64Value, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewReferencesValueUnknown(), diags
	}

	return ReferencesValue{
		Name:    nameVal,
		Subject: subjectVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewReferencesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ReferencesValue {
	object, diags := NewReferencesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewReferencesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ReferencesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewReferencesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewReferencesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewReferencesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewReferencesValueMust(ReferencesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ReferencesType) ValueType(ctx context.Context) attr.Value {
	return ReferencesValue{}
}

var _ basetypes.ObjectValuable = ReferencesValue{}

type ReferencesValue struct {
	Name    basetypes.StringValue `tfsdk:"name"`
	Subject basetypes.StringValue `tfsdk:"subject"`
	Version basetypes.Int64Value  `tfsdk:"version"`
	state   attr.ValueState
}

func (v ReferencesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["subject"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Subject.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["subject"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ReferencesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ReferencesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ReferencesValue) String() string {
	return "ReferencesValue"
}

func (v ReferencesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":    basetypes.StringType{},
		"subject": basetypes.StringType{},
		"version": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":    v.Name,
			"subject": v.Subject,
			"version": v.Version,
		})

	return objVal, diags
}

func (v ReferencesValue) Equal(o attr.Value) bool {
	other, ok := o.(ReferencesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Subject.Equal(other.Subject) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v ReferencesValue) Type(ctx context.Context) attr.Type {
	return ReferencesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ReferencesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":    basetypes.StringType{},
		"subject": basetypes.StringType{},
		"version": basetypes.Int64Type{},
	}
}
